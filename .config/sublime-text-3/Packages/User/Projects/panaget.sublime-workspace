{
	"auto_complete":
	{
		"selected_items":
		[
			[
				"getComm",
				"getCommercialType"
			],
			[
				"write",
				"writeException"
			],
			[
				"background",
				"background-color"
			],
			[
				"ROLE_GROUP_",
				"ROLE_GROUP_RETAILER"
			],
			[
				"ROLE",
				"ROLE_GROUP_COMMERCIAUX"
			],
			[
				"unass",
				"unassigned"
			],
			[
				"point",
				"point_of_sale"
			],
			[
				"str_rep",
				"str_replace"
			],
			[
				"commercial",
				"commercial_binomial_id"
			],
			[
				"commerci",
				"commercial_id"
			],
			[
				"binomi",
				"binomials"
			],
			[
				"ass",
				"assignations"
			],
			[
				"assigne",
				"assignment"
			],
			[
				"pointOf",
				"pointOfSale"
			],
			[
				"commer",
				"commercial_id"
			],
			[
				"upda",
				"updated_by"
			],
			[
				"crea",
				"created_by"
			],
			[
				"updated",
				"updated_at"
			],
			[
				"assi",
				"assigned_to_id"
			],
			[
				"stat",
				"status"
			],
			[
				"point_of_sale",
				"point_of_sale_id"
			],
			[
				"quote_request",
				"quote_request_assignment"
			],
			[
				"array_fil",
				"array_filter"
			],
			[
				"form",
				"formBuilder"
			],
			[
				"constat",
				"constant_score"
			],
			[
				"publi",
				"publishEnd"
			],
			[
				"back",
				"background-color"
			],
			[
				"inli",
				"inline-block"
			]
		]
	},
	"buffers":
	[
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/HourlyEmailReminderCommand.php",
			"settings":
			{
				"buffer_size": 9116,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Mailer/Mailer.php",
			"settings":
			{
				"buffer_size": 5904,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "<?php\n\nnamespace Panaget\\AdminBundle\\Controller\\Lead;\n\nuse Doctrine\\ORM\\EntityRepository;\nuse Faros\\AdminBundle\\Controller\\CRUD\\ORMController;\nuse Panaget\\AdminBundle\\Controller\\Traits\\ProfileController;\nuse Panaget\\AdminBundle\\Form\\QuoteRequestAdminType;\nuse Panaget\\AdminBundle\\Form\\QuoteRequestCommercialType;\nuse Panaget\\AdminBundle\\Form\\QuoteRequestRetailerType;\nuse Panaget\\AdminBundle\\Form\\QuoteRequestSectionType;\nuse Panaget\\AdminBundle\\Form\\QuoteRequestWithoutProjectType;\nuse Panaget\\SiteBundle\\Entity\\Core\\PointOfSale;\nuse Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequest;\nuse Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequestAssignment;\nuse Symfony\\Component\\HttpFoundation\\RedirectResponse;\nuse Symfony\\Component\\HttpFoundation\\Request;\nuse Symfony\\Component\\HttpKernel\\HttpKernel;\n\nclass QuoteRequestAdminController extends ORMController\n{\n    use ProfileController;\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function getName()\n    {\n        return 'quote_request_admin';\n    }\n\n    protected function getFormType()\n    {\n        return;\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function getRolePrefix()\n    {\n        return 'ROLE_ADMIN_QUOTE_REQUEST_ADMIN_';\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function getEntityName()\n    {\n        return 'Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequest';\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function getRoutePrefix()\n    {\n        return 'admin_quote_request_admin_';\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    public function getQueryBuilder(Request $request, array $filters = array())\n    {\n        $repo = $this\n            ->get('doctrine')\n            ->getRepository($this->getEntityName())\n        ;\n\n        $qb = $repo->createQueryBuilder('qr');\n\n        $qb\n           ->addSelect('la', 'qra')\n           ->leftJoin('qr.leadActivity', 'la')\n           ->leftJoin('qr.assignments', 'qra')\n           ->leftJoin('qr.commercialBinomial', 'cb')\n           ->leftJoin('la.country', 'cou')\n           ->leftJoin('qr.surveyAnswer', 'sa')\n        ;\n\n        if (isset($filters['status'])) {\n            $qb\n               ->andWhere('qr.status = :status')\n               ->setParameter('status', $filters['status'])\n            ;\n        }\n\n        if (isset($filters['hasSurveyAnswer']) && $filters['hasSurveyAnswer']) {\n            $qb\n               ->andWhere('sa.id IS NOT NULL')\n            ;\n        }\n\n        if (isset($filters['hasProject']) && $filters['hasProject']) {\n            $qb\n               ->andWhere('qr.hasProject = :hasProject')\n               ->setParameter('hasProject', $filters['hasProject'] == 'yes' ? true : false)\n            ;\n        }\n\n        if ('commercial' == $this->getCurrentProfile() || (isset($filters['commercial']) && $filters['commercial'])) {\n\n            if (!isset($filters['commercial'])) {\n                // Filtre sur les statuts du commercial\n                $qb\n                    ->andWhere('qr.status IN (:statuses)')\n                    ->setParameter('statuses', array_keys(QuoteRequest::$commercialReachableStatusValues))\n                ;\n            }\n\n            $pointOfSales = [];\n            $commercialProfile = isset($filters['commercial']) ? $filters['commercial'] : $this->getCommercialProfile();\n\n            foreach ($commercialProfile->getSedentaryPointOfSales() as $pos) {\n                $pointOfSales[] = $pos->getId();\n            }\n            foreach ($commercialProfile->getTerrainPointOfSales() as $pos) {\n                $pointOfSales[] = $pos->getId();\n            }\n\n            $qb\n                ->andWhere('cb.sedentaryCommercial = :commercial_id OR cb.terrainCommercial = :commercial_id')\n                ->setParameter('commercial_id', $commercialProfile->getId())\n            ;\n        } elseif ('section' == $this->getCurrentProfile()) {\n            // Filtre sur les statuts du commercial\n            $qb\n                ->andWhere('qr.status IN (:statuses)')\n                ->setParameter('statuses', array_keys(QuoteRequest::$commercialReachableStatusValues))\n            ;\n\n            $commercialIds = $pointOfSales = [];\n            foreach ($this->getSectionProfile()->getCommercials() as $commercialProfile) {\n                $commercialIds[] = $commercialProfile->getId();\n                foreach ($commercialProfile->getSedentaryPointOfSales() as $pos) {\n                    $pointOfSales[] = $pos->getId();\n                }\n                foreach ($commercialProfile->getTerrainPointOfSales() as $pos) {\n                    $pointOfSales[] = $pos->getId();\n                }\n            }\n\n\n            // devis relié à un point de vente\n            // -OU- à un commercial (sédentaire ou terrain), ou aucun commercial\n            $qb\n                ->andWhere('cb.sedentaryCommercial IN(:commercial_id) OR cb.terrainCommercial IN(:commercial_id)')\n                ->orWhere('cb.sedentaryCommercial IS NULL AND cb.terrainCommercial IS NULL')\n                ->setParameter('commercial_id', $commercialIds)\n            ;\n        }\n\n        if (isset($filters['assigned_to'])) {\n            $qb\n               ->andWhere('qra.pointOfSale = :assigned_to')\n               ->setParameter('assigned_to', $filters['assigned_to'])\n            ;\n        }\n\n        if ('retailer' == $this->getCurrentProfile()) {\n            $retailerProfile = $this->getRetailerProfile();\n\n            if ($retailerProfile) {\n                $pointOfSales = [];\n                foreach ($retailerProfile->getPointOfSales() as $pos) {\n                    $pointOfSales = $pos->getId();\n                }\n                $qb\n                    ->andWhere('qra.pointOfSale IN (:assigned_to)')\n                    ->setParameter('assigned_to', $pointOfSales)\n                    ->andWhere('qra.status IN (:qra_statuses)')\n                    ->andWhere('qr.status IN (:statuses)')\n                    ->setParameter('qra_statuses', array_keys(QuoteRequestAssignment::$proReachableStatusValues))\n                    ->setParameter('statuses', array_keys(QuoteRequest::$proReachableStatusValues))\n                    ->andWhere('qr.hasProject = :has_project')\n                    ->setParameter('has_project', true)\n                ;\n            } else {\n                $qb->andWhere('qr.id IS NULL');\n            }\n        }\n\n        return $qb;\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    public function getFilterForm(Request $request)\n    {\n        $builder = $this->createFormFilterBuilder($request);\n\n        if ('commercial' == $this->getCurrentProfile() || 'section' == $this->getCurrentProfile()) {\n            $builder->add('status', 'choice', array(\n                'choices' => QuoteRequest::$commercialReachableStatusValues,\n                'required' => false,\n                'label' => false,\n                'empty_value' => 'quote_request_admin.list.filters.status',\n            ));\n        } elseif ('retailer' == $this->getCurrentProfile()) {\n            $builder->add('status', 'choice', array(\n                'choices' => QuoteRequest::$proReachableStatusValues,\n                'required' => false,\n                'label' => false,\n                'empty_value' => 'quote_request_admin.list.filters.status',\n            ));\n        } else {\n            $builder->add('status', 'choice', array(\n                'choices' => QuoteRequest::$statusValues,\n                'required' => false,\n                'label' => false,\n                'empty_value' => 'quote_request_admin.list.filters.status',\n            ));\n        }\n\n        if ('commercial' == $this->getCurrentProfile()) {\n            $pointOfSales = [];\n            $commercialProfile = $this->getCommercialProfile();\n\n            foreach ($commercialProfile->getSedentaryPointOfSales() as $pos) {\n                $pointOfSales[] = $pos->getId();\n            }\n            foreach ($commercialProfile->getTerrainPointOfSales() as $pos) {\n                $pointOfSales[] = $pos->getId();\n            }\n            $builder->add('assigned_to', 'entity', array(\n                'class' => 'Panaget\\SiteBundle\\Entity\\Core\\PointOfSale',\n                'query_builder' =>  function (EntityRepository $er) use ($pointOfSales) {\n                    return $er->createQueryBuilder('pos')\n                              ->innerJoin('pos.retailerUsers', 'rp') // On s'assure qu'il y a un user RetailerProfile affilié au point de vente\n                              ->where('pos.enabled = 1')\n                              ->andWhere('pos.businessType IN (:businessTypeQr)')\n                              ->setParameter('businessTypeQr', PointOfSale::$assignableBusinessTypeValues)\n                              ->andWhere('pos.id IN (:pointOfSales)')\n                              ->setParameter('pointOfSales', $pointOfSales)\n                              ->orderBy('pos.name')\n                    ;\n                },\n                'property' => 'name',\n                'group_by' => 'businessType',\n                'required' => false,\n                'label' => false,\n                'empty_value' => 'quote_request_admin.list.filters.assigned_to',\n            ));\n        } elseif ('section' == $this->getCurrentProfile()) {\n\n            $commercialIds = $pointOfSales = [];\n            foreach ($this->getSectionProfile()->getCommercials() as $commercialProfile) {\n                $commercialIds[] = $commercialProfile->getId();\n                foreach ($commercialProfile->getSedentaryPointOfSales() as $pos) {\n                    $pointOfSales[] = $pos->getId();\n                }\n                foreach ($commercialProfile->getTerrainPointOfSales() as $pos) {\n                    $pointOfSales[] = $pos->getId();\n                }\n            }\n\n            $builder->add('assigned_to', 'entity', array(\n                'class' => 'Panaget\\SiteBundle\\Entity\\Core\\PointOfSale',\n                'query_builder' =>  function (EntityRepository $er) use ($pointOfSales) {\n                    return $er->createQueryBuilder('pos')\n                              ->innerJoin('pos.retailerUsers', 'rp') // On s'assure qu'il y a un user RetailerProfile affilié au point de vente\n                              ->where('pos.enabled = 1')\n                              ->andWhere('pos.businessType IN (:businessTypeQr)')\n                              ->setParameter('businessTypeQr', PointOfSale::$assignableBusinessTypeValues)\n                              ->andWhere('pos.id IN (:pointOfSales)')\n                              ->setParameter('pointOfSales', $pointOfSales)\n                              ->orderBy('pos.name')\n                    ;\n                },\n                'property' => 'name',\n                'group_by' => 'businessType',\n                'required' => false,\n                'label' => false,\n                'empty_value' => 'quote_request_admin.list.filters.assigned_to',\n            ));\n\n            $builder->add('commercial', 'entity', array(\n                'class' => 'Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile',\n                'query_builder' =>  function (EntityRepository $er) use($commercialIds) {\n                    return $er->createQueryBuilder('com')\n                            ->innerJoin('com.user', 'u')\n                              ->where('com.enabled = 1')\n                              ->orderBy('u.lastname')\n                              ->andWhere('com.id IN (:commercials)')\n                              ->setParameter('commercials', $commercialIds)\n                    ;\n                },\n                'required' => false,\n                'label' => false,\n                'attr' => ['class' => 'select2'],\n                'empty_value' => 'quote_request_admin.list.filters.commercial',\n            ));\n\n        } elseif ('retailer' != $this->getCurrentProfile()) {\n            $builder->add('assigned_to', 'entity', array(\n                'class' => 'Panaget\\SiteBundle\\Entity\\Core\\PointOfSale',\n                'query_builder' =>  function (EntityRepository $er) {\n                    return $er->createQueryBuilder('pos')\n                              ->innerJoin('pos.retailerUsers', 'rp') // On s'assure qu'il y a un user RetailerProfile affilié au point de vente\n                              ->where('pos.enabled = 1')\n                              ->andWhere('pos.businessType IN (:businessTypeQr)')\n                              ->setParameter('businessTypeQr', PointOfSale::$assignableBusinessTypeValues)\n                              ->orderBy('pos.name')\n                    ;\n                },\n                'property' => 'name',\n                'group_by' => 'businessType',\n                'required' => false,\n                'label' => false,\n                'empty_value' => 'quote_request_admin.list.filters.assigned_to',\n            ));\n            $builder->add('commercial', 'entity', array(\n                'class' => 'Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile',\n                'query_builder' =>  function (EntityRepository $er) {\n                    return $er->createQueryBuilder('com')\n                            ->innerJoin('com.user', 'u')\n                              ->where('com.enabled = 1')\n                              ->orderBy('u.lastname')\n                    ;\n                },\n                'required' => false,\n                'label' => false,\n                'attr' => ['class' => 'select2'],\n                'empty_value' => 'quote_request_admin.list.filters.commercial',\n            ));\n        }\n\n        if ('retailer' != $this->getCurrentProfile()) {\n            $builder->add('hasProject', 'choice', array(\n                'choices' => [\n                    'yes' => 'quote_request_admin.list.filters.hasProject.yes',\n                    'no'  => 'quote_request_admin.list.filters.hasProject.no',\n                ],\n                'empty_value' => 'quote_request_admin.list.filters.hasProject.all',\n                'label' => false,\n            ));\n        }\n\n        $builder->add('hasSurveyAnswer', 'checkbox', array(\n            'widget_toggle' => 'toggle-grape',\n            'label' => 'quote_request_admin.list.filters.hasSurveyAnswer',\n        ));\n\n        return $builder->getForm();\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function getAdditionalViewVars($method, Request $request)\n    {\n        $additionalViewVars = array();\n\n        if ('listAction' == $method) {\n            // Récupération des filtres\n            $filterForm = $this->getFilterForm($request);\n            if (null === $filterForm) {\n                $filters = array();\n            } else {\n                $filterForm->handleRequest($request);\n                $filters = null !== $filterForm->getData() ? $filterForm->getData() : array();\n            }\n\n            // Clonage du QueryBuilder\n            $qb = clone($this->getQueryBuilder($request, $filters));\n            $qb\n                ->select('qr.status AS status, COUNT(DISTINCT qr.id) AS cnt')\n                ->groupBy('qr.status')\n            ;\n\n            $statusCounts = $qb->getQuery()->getArrayResult();\n\n            // Construction du tableau d'indicateurs\n            $indicators = array();\n            $total = 0;\n            foreach ($statusCounts as $indicator) {\n                $indicators[$indicator['status']] = $indicator['cnt'];\n                $total += $indicator['cnt'];\n            }\n            $indicators['total'] = $total;\n\n            $additionalViewVars['indicators'] = $indicators;\n\n            if ('commercial' == $this->getCurrentProfile() || 'section' == $this->getCurrentProfile()) {\n                $additionalViewVars['reachableStatus'] = QuoteRequest::$commercialReachableStatusValues;\n            } elseif ('retailer' == $this->getCurrentProfile()) {\n                $additionalViewVars['reachableStatus'] = QuoteRequest::$proReachableStatusValues;\n            } else {\n                $additionalViewVars['reachableStatus'] = QuoteRequest::$statusValues;\n            }\n        }\n\n        return $additionalViewVars;\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function getColumns()\n    {\n        $t = $this->get('translator');\n        $formatter = \\IntlDateFormatter::create(null, \\IntlDateFormatter::MEDIUM, \\IntlDateFormatter::NONE);\n        $dateProcessor = function ($date) use ($formatter) {\n            if (null === $date) {\n                return null;\n            }\n\n            return $formatter->format($date);\n        };\n\n        $starsProcessor = $this->get('panaget.quote_request.stars_processor');\n\n        return [\n            [\n                'data' => 'id',\n                'field' => 'qr.id',\n                'class' => 'row-id hidden-sm hidden-xs',\n                'process' => function ($data) { return $data->getId(); },\n                'searchable' => true,\n            ],\n            [\n                'data' => 'user',\n                'field' => 'la.lastname',\n                'searchable' => true,\n                'process' => function ($data) {\n                    return sprintf(\n                        '<a href=\"%s\">%s %s %s</a>',\n                        $this->generateUrl('admin_quote_request_admin_show', ['id' => $data->getId()]),\n                        $data->getActivity()->getCivility()->getTitleShort(),\n                        strtoupper($data->getActivity()->getLastname()),\n                        $data->getActivity()->getFirstname()\n                    );\n                },\n            ],\n            [\n                'data' => 'type',\n                'field' => 'la.type',\n                'searchable' => true,\n                'process' => function ($data) use ($t) {\n                    return  $t->trans('user.type.' . $data->getLeadActivity()->getType());\n                },\n            ],\n            [\n                'data' => 'floorArea',\n                'searchable' => false,\n            ],\n            [\n                'data' => 'zipcode',\n                'field' => 'la.zipcode',\n                'class' => 'hidden-sm hidden-xs',\n                'searchable' => true,\n                'process' => function ($data) { return $data->getActivity()->getZipcode(); },\n            ],\n            [\n                'data' => 'city',\n                'field' => 'la.city',\n                'class' => 'hidden-sm hidden-xs',\n                'searchable' => true,\n                'process' => function ($data) { return ucfirst($data->getActivity()->getCity()); },\n            ],\n            [\n                'data' => 'country',\n                'field' => 'cou.name',\n                'class' => 'hidden-sm hidden-xs',\n                'searchable' => true,\n                'process' => function ($data) { return $data->getActivity()->getCountry() ? $data->getActivity()->getCountry()->getName() : ''; },\n            ],\n            [\n                'data' => 'createdAt',\n                'field' => 'la.createdAt',\n                'order' => 'desc',\n                'process' => function ($data) use ($dateProcessor) { return $dateProcessor($data->getActivity()->getCreatedAt()); },\n            ],\n            [\n                'data' => 'commercial',\n                'class' => 'hidden-sm hidden-xs',\n                'searchable' => false,\n                'orderable' => false,\n                'process' => function ($data) {\n                    if ($data->getCommercialBinomial()) {\n                        return str_replace('/', '<br>', $data->getCommercialBinomial()->toString($data->getCommercialType()));\n                    }\n                },\n            ],\n            [\n                'data' => 'assignedTo',\n                'searchable' => false,\n                'orderable' => false,\n                'process' => function ($data) use ($t, $dateProcessor) {\n                    $assignations = [];\n                    foreach ($data->getAssignments() as $ass) {\n                        $assignations[] = sprintf('%s <label class=\"label label-default label-qra-%s\">%s %s</label>',\n                            (string) $ass->getPointOfSale(),\n                            $ass->getStatus(),\n                            $t->trans('quote_request_assignment.status.' . $ass->getStatus()),\n                            ($ass->getContactedAt() ? ' <i title=\"'. $dateProcessor($ass->getContactedAt()) .'\" class=\"fa fa-user\"></i>' : '')\n                        );\n                    }\n                    return implode('<br/>', $assignations);\n                },\n            ],\n            [\n                'data' => 'status',\n                'searchable' => true,\n                'process' => function ($data) use ($t) {\n                    $statusLabel = $t->trans('quote_request.status.' . $data->getStatus());\n                    $statusLabel = sprintf('<span class=\"label label-default label-qr-%s\">%s</span>', $data->getStatus(), $statusLabel);\n\n                    return $statusLabel;\n                },\n            ],\n            [\n                'data' => 'surveyAnswer',\n                'field' => 'sa.id',\n                'class' => 'hidden-sm hidden-xs ' . ( $this->get('security.context')->isGranted('ROLE_GROUP_RETAILER') ? 'hidden' : ''),\n                'searchable' => false,\n                'orderable' => true,\n                'process' => function ($data) {\n                    $surveyAnswer = $data->getSurveyAnswer();\n                    if ($surveyAnswer) {\n                        return '<i class=\"fa fa-check\"></i>';\n                    }\n                },\n            ],\n            [\n                'data' => 'stars',\n                'searchable' => false,\n                'orderable' => true,\n                'process' => function ($data) use ($starsProcessor) {\n                    return $starsProcessor->getFormattedStars($data);\n                },\n            ],\n        ];\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    public function getRowExtraActions($action, array $data)\n    {\n        $actions = parent::getRowExtraActions($action, $data);\n\n        $actions[] = [\n            'path' => $this->generateUrl($this->getRoutePrefix() . 'show', array('id' => $data['id'])),\n            'icon' => 'fa-search',\n        ];\n\n        return $actions;\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function getRedirection($action, $entity = null)\n    {\n        if ('newAction' === $action) {\n            if ($this->get('security.context')->isGranted($this->getRequiredRole('show'))) {\n                $url = $this->get('router')->generate($this->getRoute('show'), ['id' => $entity->getId()]);\n            } else {\n                $url = $this->get('router')->generate($this->getRoute('new'));\n            }\n        } elseif ('decideAction' === $action) {\n            $url = $this->get('router')->generate($this->getRoute('show'), ['id' => $entity->getId()]);\n        } else {\n            throw InvalidArgumentException(sprintf(\"Unable to get the redirection URL for the '%s' action\", $action));\n        }\n\n        return $url;\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    public function getDecideFormType(QuoteRequest $qr)\n    {\n        if (!$qr->getHasProject()) {\n            return new QuoteRequestWithoutProjectType($qr, $this->get('validator'), $this->get('panaget.quote_request.assignation_helper'));\n        }\n\n        if ('retailer' == $this->getCurrentProfile()) {\n            return new QuoteRequestRetailerType($qr, $this->get('validator'), $this->get('panaget.quote_request.assignation_helper'));\n        } elseif ('commercial' == $this->getCurrentProfile()) {\n            return new QuoteRequestCommercialType($qr, $this->get('validator'), $this->get('panaget.quote_request.assignation_helper'), $this->getCommercialProfile());\n        } elseif ('section' == $this->getCurrentProfile()) {\n            return new QuoteRequestSectionType($qr, $this->get('validator'), $this->get('panaget.quote_request.assignation_helper'), $this->getSectionProfile());\n        } else {\n            return new QuoteRequestAdminType($qr, $this->get('validator'), $this->get('panaget.quote_request.assignation_helper'));\n        }\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    public function getDecideFormHandler(QuoteRequest $qr)\n    {\n        if (!$qr->getHasProject()) {\n            return 'panaget_admin.quote_request_without_project.form_handler';\n        }\n\n        if ('retailer' == $this->getCurrentProfile()) {\n            return 'panaget_admin.quote_request_retailer.form_handler';\n        } elseif ('commercial' == $this->getCurrentProfile()) {\n            return 'panaget_admin.quote_request_commercial.form_handler';\n        } elseif ('section' == $this->getCurrentProfile()) {\n            return 'panaget_admin.quote_request_section.form_handler';\n        } else {\n            return 'panaget_admin.quote_request_admin.form_handler';\n        }\n    }\n\n    /**\n     * @{inheritDoc}\n     */\n    protected function findEntity(Request $request)\n    {\n        $id = $request->attributes->get('id');\n\n        $repo = $this\n            ->get('doctrine')\n            ->getRepository($this->getEntityName())\n        ;\n\n        $qb = $repo->createQueryBuilder('qr');\n\n        $qb\n           ->addSelect('la', 'civ', 'cou', 'qrl', 'qra', 'pos')\n           ->leftJoin('qr.leadActivity', 'la')\n           ->leftJoin('qr.assignments', 'qra')\n           ->leftJoin('qr.commercialBinomial', 'cb')\n           ->leftJoin('qra.pointOfSale', 'pos')\n           ->leftJoin('la.civility', 'civ')\n           ->leftJoin('la.country', 'cou')\n           ->leftJoin('qr.quoteRequestLogs', 'qrl')\n           ->where('qr.id = :id')\n           ->setParameter('id', $id)\n        ;\n\n        if ('retailer' == $this->getCurrentProfile()) {\n            $pointOfSales = [];\n            foreach ($this->getRetailerProfile()->getPointOfSales() as $pos) {\n                $pointOfSales = $pos->getId();\n            }\n            $qb\n                ->andWhere('qra.pointOfSale IN (:assigned_to)')\n                ->setParameter('assigned_to', $pointOfSales)\n                ->andWhere('qr.status IN (:statuses)')\n                ->setParameter('statuses', array_keys(QuoteRequest::$proReachableStatusValues))\n                ->andWhere('qra.status IN (:qra_statuses)')\n                ->setParameter('qra_statuses', array_merge(['missed'], array_keys(QuoteRequestAssignment::$proReachableStatusValues)))\n            ;\n        }\n\n        if ('commercial' == $this->getCurrentProfile()) {\n            $pointOfSales = [];\n            $commercialProfile = $this->getCommercialProfile();\n\n            foreach ($commercialProfile->getSedentaryPointOfSales() as $pos) {\n                $pointOfSales[] = $pos->getId();\n            }\n            foreach ($commercialProfile->getTerrainPointOfSales() as $pos) {\n                $pointOfSales[] = $pos->getId();\n            }\n\n            // On va chercher les devis associés au binomes du commercial\n            $qb\n                ->andWhere('cb.sedentaryCommercial IN (:commercial_id) OR cb.terrainCommercial IN (:commercial_id)')\n                ->setParameter('commercial_id', $commercialProfile->getId())\n                ->andWhere('qr.status IN (:statuses)')\n                ->setParameter('statuses', array_keys(QuoteRequest::$commercialReachableStatusValues))\n            ;\n        }\n\n        return $qb->getQuery()->getOneOrNullResult();\n    }\n\n    /**\n     * Show action\n     *\n     * @param Request $request\n     *\n     * @return mixed\n     */\n    public function showAction(Request $request)\n    {\n\n        $this->checkGranted('show');\n\n        try {\n            $entity = $this->findEntityOr404($request);\n        } catch (\\Symfony\\Component\\HttpKernel\\Exception\\NotFoundHttpException $e) {\n            if ('retailer' == $this->getCurrentProfile() || 'commercial' == $this->getCurrentProfile()) {\n                return $this->redirect($this->get('router')->generate($this->getRoute('list')));\n            }\n\n            throw $e;\n        }\n\n        $currentQraStatus = null;\n\n        if ('retailer' == $this->getCurrentProfile()) {\n            $qra = $entity->getCurrentAssignment();\n            $currentQraStatus = $qra->getStatus();\n\n\n            $now = new \\DateTime();\n            // Si on dépasse la date d'expiration.\n            if ($qra && in_array($qra->getStatus(), ['assigned', 'missed']) && $qra->getExpiredAt() < $now) {\n\n                $this->get('panaget.quote_request.manager')->missed($qra);\n\n                $this->get('session')->getFlashBag()->add(\n                    'warning',\n                    $this->get('translator')->trans('quote_request_assignment.show.too_late', ['%binomial%' => (string) $entity->getCommercialBinomial()])\n                );\n                $redirectTo = $this->get('router')->generate($this->getRoute('list'));\n                return new RedirectResponse($redirectTo, 301);\n            }\n        }\n\n        $canDecide = true;\n        if ('commercial' == $this->getCurrentProfile()) {\n            $commercialProfile = $this->getCommercialProfile();\n            $isAssignedSedentary = $entity->getCommercialBinomial()->getSedentaryCommercial()->getUser() === $this->getUser() && $entity->getCommercialType() === 'sedentary';\n            $isAssignedTerrain = $entity->getCommercialBinomial()->getTerrainCommercial()->getUser() === $this->getUser() && $entity->getCommercialType() === 'terrain';\n            $canDecide = $isAssignedTerrain || $isAssignedSedentary;\n        }\n\n        $this->forceAncestorInBreadcrumb($this->getRoutePrefix().'list', '#' . $entity->getId());\n\n        // Status avant submit, au cas où il serait modifié dans le Form..\n        $currentQrStatus = $entity->getStatus();\n\n        $formType = $this->getDecideFormType($entity);\n\n        if ($formType) {\n            $form = $this->get('form.factory')->create($formType, $entity);\n\n            $form->handleRequest($request);\n\n            if ($form->isValid()) {\n                $this->checkGranted('decide');\n\n                try {\n                    $this->get($this->getDecideFormHandler($entity))->handle($form, $currentQrStatus, $currentQraStatus);\n\n                    // $this->get('session')->getFlashBag()->add(\n                    //     'success',\n                    //     'CRUD.edit.successfully_saved'\n                    // );\n\n                    $redirectTo = $this->getRedirection('decideAction', $entity);\n\n                    $this->log('admin.decide', $entity->getId());\n\n                    return new RedirectResponse($redirectTo, 301);\n                } catch (\\Exception $e) {\n                    $this->get('session')->getFlashBag()->add('danger', $e->getMessage());\n                    $this->get('logger')->warning($e->__toString());\n                }\n            }\n        }\n\n        $this->log('admin.show', $entity->getId());\n\n        $viewVars = [\n            'name' => $this->getName(),\n            'entity' => $entity,\n            'routePrefix' => $this->getRoutePrefix(),\n            'rolePrefix' => $this->getRolePrefix(),\n            'backUrl' => $this->get('faros_admin.navigation_context')->getAttribute($request, 'back_url'),\n            'canDecide' => $canDecide,\n            'formattedStars' => $this->get('panaget.quote_request.stars_processor')->getFormattedStars($entity),\n        ];\n\n        if (isset($form)) {\n            $viewVars['form'] = $form->createView();\n        }\n\n        return $this->render($this->get('faros_admin.context_manager')->guessTemplate($this, 'showAction', $request), $viewVars);\n    }\n\n    public function surveyResultAction($answerId)\n    {\n        $viewVars = [];\n\n        $answerQb = $this->get('doctrine')->getRepository('LePhareSurveyBundle:Answer')->createQueryBuilder('a');\n        $answerQb\n                 ->addSelect('c', 'r')\n                 ->leftJoin('a.choices', 'c')\n                 ->leftJoin('a.responses', 'r')\n                 ->where('a.id = :answerId')\n                 ->setParameter('answerId', $answerId)\n        ;\n        $answer = $answerQb->getQuery()->getOneOrNullResult();\n\n        if (!isset($answer)) {\n            throw $this->createNotFoundException('La réponse au questionnaire n\\'a pas été trouvée ('.$answerId.')');\n        }\n\n        $surveyRepo = $this->get('doctrine')->getRepository('LePhareSurveyBundle:Survey');\n        // On passe par ce repository pour les jointures\n        $survey = $surveyRepo->getSurveyByCode($answer->getSurvey()->getCode());\n\n        $viewVars['answer'] = $answer;\n        $viewVars['survey'] = $survey;\n\n        return $this->render('PanagetAdminBundle:Lead/QuoteRequestAdmin:_surveyResult.html.twig', $viewVars);\n    }\n}\n",
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php",
			"file_size": 32516,
			"file_write_time": 131443280820253134,
			"settings":
			{
				"buffer_size": 32544,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/Repository/QuoteRequestRepository.php",
			"settings":
			{
				"buffer_size": 14800,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/GenerateQuoteRequestStarsCommand.php",
			"settings":
			{
				"buffer_size": 1376,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"contents": "e9751e6f (alterphp           2015-03-30 17:43:02 +0200   1) <?php\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200   2) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200   3) namespace Panaget\\SiteBundle\\QuoteRequest;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200   4) \n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200   5) use LePhare\\Utils\\Date\\WorkingDays;\n5c3e5fd2 (Philippe Roussille 2017-03-02 17:54:27 +0100   6) use Panaget\\SiteBundle\\Entity\\Cms\\InfoMessage;\n5c3e5fd2 (Philippe Roussille 2017-03-02 17:54:27 +0100   7) use Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial;\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100   8) use Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200   9) use Panaget\\SiteBundle\\Entity\\Core\\PointOfSale;\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200  10) use Panaget\\SiteBundle\\Entity\\Core\\User;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  11) use Panaget\\SiteBundle\\Entity\\Lead\\Inquiry;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  12) use Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequest;\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100  13) use Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequestAssignment;\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100  14) use Panaget\\SiteBundle\\Event\\QuoteRequestEvent;\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100  15) use Panaget\\SiteBundle\\Event\\QuoteRequestEvents;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  16) use Symfony\\Component\\DependencyInjection\\ContainerInterface;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  17) use Symfony\\Component\\OptionsResolver\\OptionsResolver;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  18) use Symfony\\Component\\OptionsResolver\\OptionsResolverInterface;\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100  19) use Symfony\\Component\\Validator\\Constraints\\DateTime;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  20) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  21) class Manager\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  22) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  23)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  24)      * EntityManager\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  25)      * @var \\Doctrine\\ORM\\EntityManager\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  26)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  27)     protected $em;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  28) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  29)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  30)      * Mailer\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  31)      * @var \\Panaget\\SiteBundle\\Mailer\\Mailer\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  32)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  33)     protected $mailer;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  34) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  35)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  36)      * Logger\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  37)      * @var \\Psr\\Log\\LoggerInterface\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  38)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  39)     protected $logger;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  40) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  41)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  42)      * Logger des QuoteRequest\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  43)      * @var \\Panaget\\SiteBundle\\QuoteRequest\\Logger\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  44)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  45)     protected $qrLogger;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  46) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  47)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  48)      * Paramètres Faros\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  49)      * @var \\Faros\\CoreBundle\\Entity\\Repository\\ParameterRepository\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  50)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  51)     protected $farosParameters;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  52) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  53)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  54)      * GeolocHelper\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  55)      * @var \\Panaget\\SiteBundle\\Geo\\GeolocHelper\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  56)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  57)     protected $geolocHelper;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  58) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  59)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  60)      * EventDispatcher\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  61)      * @var \\Symfony\\Component\\EventDispatcher\\EventDispatcher\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  62)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  63)     protected $eventDispatcher;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  64) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  65)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  66)      * PointOfSaleRepository\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  67)      * @var \\Panaget\\SiteBundle\\Entity\\Core\\Repository\\PointOfSaleRepository\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  68)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  69)     protected $posRepo;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  70) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  71)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  72)      * AssignationHelper\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200  73)      * @var \\Panaget\\SiteBundle\\QuoteRequest\\AssignationHelper\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  74)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  75)     protected $assignationHelper;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  76) \n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200  77)     protected $translator;\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200  78) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  79)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  80)      * Tableau d'options\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  81)      * @var array\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  82)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  83)     protected $options;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  84) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  85)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  86)      * @param ContainerInterface $container [description]\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  87)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  88)     public function __construct(ContainerInterface $container, array $options)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  89)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  90)         $this->em                   = $container->get('doctrine.orm.default_entity_manager');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  91)         $this->mailer               = $container->get('panaget.mailer');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  92)         $this->logger               = $container->get('logger');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  93)         $this->qrLogger             = $container->get('panaget.quote_request.logger');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  94)         $this->farosParameters      = $container->get('faros.parameters');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  95)         $this->geolocHelper         = $container->get('panaget.geo.geoloc_helper');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  96)         $this->eventDispatcher      = $container->get('event_dispatcher');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  97)         $this->posRepo              = $container->get('panaget.pos.repository');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200  98)         $this->assignationHelper    = $container->get('panaget.quote_request.assignation_helper');\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200  99)         $this->translator           = $container->get('translator');\nf8c06bc1 (Philippe Roussille 2017-03-23 16:26:58 +0100 100)         $this->user = null;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 101) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 102)         $resolver = new OptionsResolver();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 103)         $this->setDefaultOptions($resolver);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 104)         $this->options = $resolver->resolve($options);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 105) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 106)         if ($container->get('security.context')->getToken()) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 107)             $this->user = $container->get('security.context')->getToken()->getUser();\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 108) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 109)             // On nullifie le User\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 110)             if (! $this->user instanceof User) {\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 111)                 $this->user = null;\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 112)             }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 113)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 114)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 115) \n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 116)     public function getOption($key)\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 117)     {\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 118)         return isset($this->options[$key]) ? $this->options[$key] : null;\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 119)     }\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 120) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 121)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 122)      * Creates an empty QuoteRequest for form generation\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 123)      * @return QuoteRequest\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 124)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 125)     public function createQuoteRequest()\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 126)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 127)         $quoteRequest = new QuoteRequest();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 128) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 129)         $leadActivity = new $this->options['leadActivityClass']();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 130)         $leadActivity->setClass(get_class($quoteRequest));\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 131) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 132)         // Initialisation du pays\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 133)         $fr = $this->em->getReference($this->options['countryClass'], 'FR');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 134)         $leadActivity->setCountry($fr);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 135) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 136)         // Valeurs par défaut au chargement du formulaire\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 137)         $leadActivity\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 138)                      ->setGivenOrigin('web_contact')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 139)                      ->setType('individual')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 140)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 141)         $quoteRequest\n98a2bdfd (Philippe Roussille 2017-02-24 17:39:59 +0100 142)                      ->setStatus('new')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 143)                      // ->setHasProject('quote')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 144)                      ->setContactMode('whatever')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 145)                      ->setLeadActivity($leadActivity)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 146)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 147) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 148)         return $quoteRequest;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 149)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 150) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 151)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 152)      * Processes QuoteRequest form submission\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 153)      * @param  QuoteRequest $qr\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 154)      * @return void\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 155)      */\n83919b26 (Thibaut Selingue   2016-12-12 11:07:19 +0100 156)     public function processQuoteRequestCreation(QuoteRequest $qr, InfoMessage $infoMessage = null)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 157)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 158)         // Force givenOrigin car absent du Form\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 159)         $qr->getActivity()->setGivenOrigin('web_contact');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 160) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 161)         // Enregistre le nom de société de la LeadActivity sur le User\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 162)         $qr->getActivity()->getUser()->setCompany($qr->getActivity()->getCompany());\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 163) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 164)         // Persist explicite du User\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 165)         $this->em->persist($qr->getActivity()->getUser());\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 166) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 167)         $this->em->persist($qr);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 168)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 169) \n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 170)         // Préassignation\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 171)         $this->preassign($qr);\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 172) \n0389d727 (Philippe Roussille 2017-03-24 16:09:50 +0100 173)         if (null !== ($qr->getDefaultCommercial())) {\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 174) \n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 175)             $qr->setStatus('unassigned');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 176)             $this->em->persist($qr);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 177)             $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 178) \n0389d727 (Philippe Roussille 2017-03-24 16:09:50 +0100 179) \n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 180)             $this->mailer->mail(\n0389d727 (Philippe Roussille 2017-03-24 16:09:50 +0100 181)                 $qr->getDefaultCommercial()->getUser()->getEmail(),\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 182)                 'commercial',\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 183)                 'qr_creation_notif',\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 184)                 array('qr' => $qr),\n0389d727 (Philippe Roussille 2017-03-24 16:09:50 +0100 185)                 $this->getQrAdminRecipient(true),\n2cfc3869 (Philippe Roussille 2017-04-11 16:00:07 +0200 186)                 (!$qr->isPro() ? [$qr->getOtherCommercial()->getUser()->getEmail()] : [])\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 187)             );\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 188) \n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 189)         } elseif ($qrAdminRecipient = $this->getQrAdminRecipient()) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 190)             // Mail admin\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 191)             $this->mailer->mail(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 192)                 $qrAdminRecipient,\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 193)                 'admin',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 194)                 'qr_creation_notif',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 195)                 array('qr' => $qr, '%project_site%' => $this->options['projectSite'])\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 196)             );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 197)         } else {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 198)             $this->logger->warning('No user defined with role ROLE_EMAIL_ADMIN_DEMANDE_DEVIS !');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 199)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 200) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 201)         // Mail user\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 202)         $this->mailer->mail(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 203)             $qr->getLeadActivity()->getEmail(),\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 204)             'user',\n5ddf8896 (Philippe Roussille 2016-02-25 17:47:50 +0100 205)             !$qr->getHasProject() ? 'inquiry_creation_notif' : 'qr_creation_notif',\n83919b26 (Thibaut Selingue   2016-12-12 11:07:19 +0100 206)             array(\n83919b26 (Thibaut Selingue   2016-12-12 11:07:19 +0100 207)                 'qr' => $qr,\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 208)                 'user' => $qr->getLeadActivity(),\n83919b26 (Thibaut Selingue   2016-12-12 11:07:19 +0100 209)                 '%project_site%' => $this->options['projectSite'],\n83919b26 (Thibaut Selingue   2016-12-12 11:07:19 +0100 210)                 'infoMessage' => $infoMessage,\n83919b26 (Thibaut Selingue   2016-12-12 11:07:19 +0100 211)             )\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 212)         );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 213) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 214)         // On logge la QuoteRequest\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 215)         $this->qrLogger->log('create', $qr, $qr->getActivity()->getUser());\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 216)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 217) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 218)     /**\na465c9ca (alterphp           2015-03-31 11:36:26 +0200 219)      * Transforms QuoteRequest into Inquiry (if no project)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 220)      * @param  QuoteRequest $qr\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 221)      * @return void\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 222)      */\nc4eb6b68 (Erwan Richard      2016-05-10 15:21:01 +0200 223)     public function switchToInquiry(QuoteRequest $qr)\na465c9ca (alterphp           2015-03-31 11:36:26 +0200 224)     {\nc4eb6b68 (Erwan Richard      2016-05-10 15:21:01 +0200 225)         $qr->setHasProject(false);\na465c9ca (alterphp           2015-03-31 11:36:26 +0200 226) \na465c9ca (alterphp           2015-03-31 11:36:26 +0200 227)         $this->em->flush();\na465c9ca (alterphp           2015-03-31 11:36:26 +0200 228) \nc4eb6b68 (Erwan Richard      2016-05-10 15:21:01 +0200 229)         $this->qrLogger->log('switchToInquiry', $qr, $this->user);\na465c9ca (alterphp           2015-03-31 11:36:26 +0200 230)     }\na465c9ca (alterphp           2015-03-31 11:36:26 +0200 231) \n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 232)     /**************************/\n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 233)     /**** Workflow methods ****/\n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 234)     /**************************/\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 235) \ne59e3137 (alterphp           2015-03-31 10:56:25 +0200 236)     // XXX: Cette action est appelée sur le kernel.terminate de la soumission du formulaire\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 237)     public function preassign(QuoteRequest $qr)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 238)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 239)         // Geocode QR\nfce36332 (Philippe Roussille 2016-06-16 09:40:25 +0200 240)         $this->geolocHelper->geocode($qr, '%s %s, %s', array('leadActivity.zipcode', 'leadActivity.city', 'leadActivity.country.title'));\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 241) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 242)         // Process automatic assignation\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 243)         $pos = $this->assignationHelper->automaticAssign($qr);\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 244) \n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 245)         $binomial = null;\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 246)         if ($pos) {\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 247)             $binomial = $this->em->getRepository('Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial')->getCommercialBinomialForPos($pos);\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 248)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 249) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 250)         $qr\n98a2bdfd (Philippe Roussille 2017-02-24 17:39:59 +0100 251)            ->setStatus('new')\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 252)            ->setCommercialBinomial($binomial)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 253)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 254) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 255)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 256) \ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 257)         $qra = new QuoteRequestAssignment();\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 258)         $qra->setPointOfSale($pos);\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 259) \ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 260)         $this->qrLogger->log('preassign', $qr, null, $qra);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 261)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 262) \nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 263)     public function transform(QuoteRequest $qr, $surface, $productType, $implementation)\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 264)     {\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 265)         $qr\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 266)            ->setHasProject(true)\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 267)            ->setFloorArea($surface)\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 268)            ->setProductType($productType)\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 269)            ->setImplementation($implementation)\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 270)         ;\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 271) \nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 272)         $this->em->flush();\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 273) \nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 274)         $this->qrLogger->log('transform', $qr, $this->user);\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 275)     }\nc842041b (Philippe Roussille 2016-02-18 09:35:21 +0100 276) \ne30a955f (Philippe Roussille 2016-03-23 10:27:13 +0100 277)     public function updateAddress(QuoteRequest $qr)\ne30a955f (Philippe Roussille 2016-03-23 10:27:13 +0100 278)     {\ne30a955f (Philippe Roussille 2016-03-23 10:27:13 +0100 279)         $this->em->flush();\ne30a955f (Philippe Roussille 2016-03-23 10:27:13 +0100 280) \n13c6e3a9 (Philippe Roussille 2016-07-20 17:55:18 +0200 281)         $this->geolocHelper->geocode($qr, '%s %s, %s', array('leadActivity.zipcode', 'leadActivity.city', 'leadActivity.country.title'));\n13c6e3a9 (Philippe Roussille 2016-07-20 17:55:18 +0200 282) \ne30a955f (Philippe Roussille 2016-03-23 10:27:13 +0100 283)         $this->qrLogger->log('updateAddress', $qr, $this->user);\ne30a955f (Philippe Roussille 2016-03-23 10:27:13 +0100 284)     }\ne30a955f (Philippe Roussille 2016-03-23 10:27:13 +0100 285) \ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 286)     public function assign(QuoteRequest $qr, $arrayOfPos)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 287)     {\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 288)         // On commence par supprimer les ancienne associations\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 289)         $this->removeAssignmentsForQr($qr);\n811272f0 (Corentin RICHARD   2017-03-02 15:32:39 +0100 290) \ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 291)         foreach ($arrayOfPos as $pos) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 292)             if (! $pos instanceof PointOfSale) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 293)                 $pos = $this->posRepo->find($pos);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 294)             }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 295) \ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 296)             $quoteRequestAssignment = new QuoteRequestAssignment();\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 297)             $quoteRequestAssignment\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 298)                 ->setQuoteRequest($qr)\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 299)                 ->setPointOfSale($pos)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 300)                 ->setStatus('assigned')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 301)             ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 302) \ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 303)             if ($pos->getBusinessType() == 'artisan') {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 304)                 $quoteRequestAssignment->setExpiredAt(WorkingDays::addWorkingDays(3));\n7d6218c3 (Corentin RICHARD   2017-03-02 17:45:49 +0100 305)                 $delay = 72;\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 306)             } else {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 307)                 $quoteRequestAssignment->setExpiredAt(WorkingDays::addWorkingDays(2));\n7d6218c3 (Corentin RICHARD   2017-03-02 17:45:49 +0100 308)                 $delay = 48;\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 309)             }\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 310) \ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 311)             $qr\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 312)                 ->setStatus('assigned')\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 313)                 ->addAssignment($quoteRequestAssignment)\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 314)             ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 315) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 316)             //Email de notification au professionnel\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 317)             if ($qrProUser = $this->getQrProUser($pos)) {\ne715f29c (alterphp           2015-04-02 10:25:34 +0200 318)                 $qrProRecipient = array($qrProUser->getEmail());\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 319) \ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 320)                 $proLocale = in_array(strtolower($qrProUser->getLanguage()), ['fr', 'en']) ? strtolower($qrProUser->getLanguage()) : 'en';\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 321) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 322)                 // Mail pro\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 323)                 $this->mailer->mail(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 324)                     $qrProRecipient,\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 325)                     'pro',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 326)                     'qr_assignation_notif',\n7d6218c3 (Corentin RICHARD   2017-03-02 17:45:49 +0100 327)                     array('qr' => $qr, '%project_site%' => $this->options['projectSite'], 'qrProUser' => $qrProUser, 'delay' => $delay),\nea4cbb02 (Philippe Roussille 2015-12-21 10:10:28 +0100 328)                     [],\nb681f179 (Corentin RICHARD   2017-03-07 09:42:09 +0100 329)                     [],\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 330)                     null, //from //TODO: FROM le bon commercial\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 331)                     $proLocale\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 332)                 );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 333)             } else {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 334)                 $this->logger->error(sprintf('No user found for POS #%s !', $pos->getId()));\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 335)             }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 336) \ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 337)             $this->em->persist($quoteRequestAssignment);\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 338)             $this->em->flush();\ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 339) \ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 340)             $this->qrLogger->log('assign', $qr, $this->user, $quoteRequestAssignment);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 341)         }\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 342) \ne2b759c4 (Corentin RICHARD   2017-03-02 16:57:10 +0100 343)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 344) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 345)     public function unassign(QuoteRequest $qr, $reason)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 346)     {\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 347)         $pos = $qr->getAssignedTo();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 348)         $qr\n98a2bdfd (Philippe Roussille 2017-02-24 17:39:59 +0100 349)            ->setStatus('new')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 350)            ->assignTo(null)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 351)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 352) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 353)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 354) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 355)         //TODO: email ???\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 356)         if ($qrProUser = $this->getQrProUser($pos)) {\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 357)             $qrProRecipient = array($qrProUser->getEmail());\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 358) \ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 359)             $proLocale = in_array(strtolower($qrProUser->getLanguage()), ['fr', 'en']) ? strtolower($qrProUser->getLanguage()) : 'en';\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 360) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 361)             // Mail pro\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 362)             $this->mailer->mail(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 363)                 $qrProRecipient,\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 364)                 'pro',\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 365)                 'qr_unassign_notif',\nea4cbb02 (Philippe Roussille 2015-12-21 10:10:28 +0100 366)                 array('qr' => $qr, '%project_site%' => $this->options['projectSite'], 'qrProUser' => $qrProUser, 'pos' => $pos),\nea4cbb02 (Philippe Roussille 2015-12-21 10:10:28 +0100 367)                 [],\nea4cbb02 (Philippe Roussille 2015-12-21 10:10:28 +0100 368)                 [],\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 369)                 $qr->getDefaultCommercial() ? [$qr->getDefaultCommercial()->getUser()->getEmail()] : [],\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 370)                 $proLocale\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 371)             );\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 372)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 373) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 374)         $this->qrLogger->log('unassign', $qr, $this->user, $qr->getAssignedTo(), $reason);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 375) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 376)         // Dispatche la pré-attribution qui s'effectue sur le kernel.terminate !\n098d64c1 (alterphp           2015-04-01 17:13:40 +0200 377)         $this->eventDispatcher->dispatch(QuoteRequestEvents::QR_PREASSIGN, new QuoteRequestEvent($qr));\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 378)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 379) \n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 380)     public function reset(QuoteRequest $qr, $reason)\n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 381)     {\n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 382)         $qr\n98a2bdfd (Philippe Roussille 2017-02-24 17:39:59 +0100 383)            ->setStatus('new')\n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 384)         ;\n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 385) \n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 386)         $this->em->flush();\n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 387) \n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 388)         //TODO: email ???\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 389)         if ($qrProUser = $this->getQrProUser($pos)) {\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 390)             $qrProRecipient = array($qrProUser->getEmail());\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 391) \ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 392)             $proLocale = in_array(strtolower($qrProUser->getLanguage()), ['fr', 'en']) ? strtolower($qrProUser->getLanguage()) : 'en';\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 393) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 394)             // Mail pro\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 395)             $this->mailer->mail(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 396)                 $qrProRecipient,\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 397)                 'pro',\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 398)                 'qr_unassign_notif',\nea4cbb02 (Philippe Roussille 2015-12-21 10:10:28 +0100 399)                 array('qr' => $qr, '%project_site%' => $this->options['projectSite'], 'qrProUser' => $qrProUser, 'pos' => $pos),\nea4cbb02 (Philippe Roussille 2015-12-21 10:10:28 +0100 400)                 [],\nea4cbb02 (Philippe Roussille 2015-12-21 10:10:28 +0100 401)                 [],\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 402)                 $qr->getDefaultCommercial() ? [$qr->getDefaultCommercial()->getUser()->getEmail()] : [],\ne1be8533 (Thibaut Selingue   2017-05-11 10:42:05 +0200 403)                 $proLocale\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 404)             );\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 405)         }\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 406) \n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 407)         $this->qrLogger->log('unassign', $qr, $this->user, $qr->getAssignedTo(), $reason);\n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 408)     }\n63799ee9 (Philippe Roussille 2015-12-07 10:24:06 +0100 409) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 410)     /**\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 411)      * Délègue au binome.\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 412)      * @param QuoteRequest $qr\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 413)      * @param CommercialBinomial $commercialBinomial\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 414)      */\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 415)     public function binomialSwitch(QuoteRequest $qr)\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 416)     {\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 417)         $qr\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 418)            ->setCommercialType('terrain' == $qr->getCommercialType() ? 'sedentary' : 'terrain')\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 419)         ;\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 420) \n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 421)         $this->em->flush();\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 422) \n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 423)         $this->qrLogger->log('binomialSwitch', $qr, $this->user);\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 424)     }\n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 425) \n66ae710c (Philippe Roussille 2017-03-23 17:52:57 +0100 426)     /**\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 427)      * Délègue à un autre binome.\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 428)      * Remet à new la quoteRequest.\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 429)      * @param QuoteRequest $qr\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 430)      * @param CommercialBinomial $commercialBinomial\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 431)      */\n4137e3c3 (Philippe Roussille 2017-04-06 18:27:07 +0200 432)     public function delegate(QuoteRequest $qr, CommercialBinomial $commercialBinomial, $type = null)\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 433)     {\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 434)         $qr\n5c3e5fd2 (Philippe Roussille 2017-03-02 17:54:27 +0100 435)            ->setCommercialBinomial($commercialBinomial)\n4137e3c3 (Philippe Roussille 2017-04-06 18:27:07 +0200 436)            ->setCommercialType($type)\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 437)            ->setStatus('unassigned')\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 438)         ;\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 439) \n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 440)         $this->em->flush();\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 441) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 442)         if ($qr->isPro()) {\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 443)              //Mail Commercial Terrain\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 444)             $this->mailer->mail(\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 445)                 $qr->getCommercialBinomial()->getTerrainCommercial()->getUser()->getEmail(),\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 446)                 'commercial',\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 447)                 'qr_delegate_notif',\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 448)                 array('qr' => $qr, 'pcom' => $this->user, '%project_site%' => $this->options['projectSite']),\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 449)                 [], //BBC\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 450)                 array_merge([$qr->getCommercialBinomial()->getSedentaryCommercial()->getUser()->getEmail()], $this->getQrAdminRecipient(true)) //CC\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 451)             );\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 452)         } else {\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 453)             //Mail Commercial Terrain\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 454)             $this->mailer->mail(\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 455)                 $qr->getCommercialBinomial()->getSedentaryCommercial()->getUser()->getEmail(),\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 456)                 'commercial',\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 457)                 'qr_delegate_notif',\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 458)                 array('qr' => $qr, 'pcom' => $this->user, '%project_site%' => $this->options['projectSite']),\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 459)                 [], //BBC\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 460)                 array_merge([$qr->getCommercialBinomial()->getTerrainCommercial()->getUser()->getEmail()], $this->getQrAdminRecipient(true)) //CC\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 461)             );\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 462)         }\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 463) \nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 464)         $this->removeAssignmentsForQr($qr);\nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 465) \n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 466)         $this->qrLogger->log('delegate', $qr, $this->user);\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 467)     }\n4af444fb (Philippe Roussille 2015-10-30 17:37:21 +0100 468) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 469)     public function accept(QuoteRequest $qr)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 470)     {\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 471) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 472)         if ($this->user && ! $qr->isAssignedToRetailer($this->user->getRetailerProfile())) {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 473)             throw new \\InvalidArgumentException(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 474)                 sprintf('Logged user (%s) is not assigned to QuoteRequest #%d', $this->user->getEmail(), $qr->getId())\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 475)             );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 476)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 477) \n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 478)         $qr\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 479)             ->setStatus('in_progress')\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 480)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 481) \n64cbfc1d (Philippe Roussille 2017-03-17 11:10:32 +0100 482)         $qra = $qr->getCurrentAssignment();\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 483)         $qra\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 484)             ->setStatus('accepted')\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 485)         ;\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 486)         $pos = $qra->getPointOfSale();\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 487) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 488)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 489) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 490)         // Mail user\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 491)         $this->mailer->mail(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 492)             $qr->getLeadActivity()->getEmail(),\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 493)             'user',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 494)             'qr_acceptation_notif',\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 495)             array('qr' => $qr, 'pos' => $pos, '%project_site%' => $this->options['projectSite'])\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 496)         );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 497) \n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 498)         // Envoi du mail au distributeur\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 499)         if ($qrBccRecipient = $this->getPosDistributeur($pos)) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 500) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 501)             // Mail pro\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 502)             $this->mailer->mail(\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 503)                 $qrBccRecipient,\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 504)                 'retailer',\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 505)                 'qr_acceptation_notif',\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 506)                 array('qr' => $qr, 'pos' => $pos, '%project_site%' => $this->options['projectSite'])\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 507)             );\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 508)         }\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 509) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 510)         $this->qrLogger->log('accept', $qr, $this->user, $qra);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 511)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 512) \n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 513)     /**\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 514)      * Le client est contacté.\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 515)      * @param QuoteRequest $qr\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 516)      * @param null $reason\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 517)      */\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 518)     public function contacted(QuoteRequest $qr)\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 519)     {\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 520)         if (! $qr->isAssignedToRetailer($this->user->getRetailerProfile())) {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 521)             throw new \\InvalidArgumentException(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 522)                 sprintf('Logged user (%s) is not assigned to QuoteRequest #%d', $this->user->getEmail(), $qr->getId())\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 523)             );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 524)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 525) \n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 526)       $qra = $qr->getCurrentAssignment();\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 527) //        $qra = $qr->getAssignments()->first();\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 528)         $qra\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 529)             ->setContactedAt(new \\DateTime())\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 530)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 531) \n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 532)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 533) \n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 534)         $this->qrLogger->log('contacted', $qr, $this->user, $qra);\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 535)     }\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 536) \n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 537)     /**\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 538)      * Pas de vente.\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 539)      * @param QuoteRequest $qr\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 540)      * @param $reason\n7630170e (Corentin RICHARD   2017-03-10 15:06:34 +0100 541)      */\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 542)     public function noSale(QuoteRequest $qr, $reason)\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 543)     {\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 544)         $qr\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 545)             ->setStatus('no_sale')\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 546)         ;\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 547) \n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 548)         $this->em->flush();\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 549) \nf8c06bc1 (Philippe Roussille 2017-03-23 16:26:58 +0100 550)         $this->qrLogger->log('noSale', $qr, $this->user ? $this->user : null, null, $reason);\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 551)     }\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 552) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 553)     public function qraNoSale(QuoteRequest $qr, $reason = null)\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 554)     {\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 555)         if (! $qr->isAssignedToRetailer($this->user->getRetailerProfile())) {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 556)             throw new \\InvalidArgumentException(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 557)                 sprintf('Logged user (%s) is not assigned to QuoteRequest #%d', $this->user->getEmail(), $qr->getId())\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 558)             );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 559)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 560) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 561)         $qra = $qr->getCurrentAssignment();\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 562)         if (null === $qra) {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 563)             throw new \\InvalidArgumentException(\"Impossible de trouver l'assignation de la QR #{$qr->getId()}\");\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 564)         }\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 565) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 566)         $qra->setStatus('no_sale');\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 567) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 568)         $allNoSale = true;\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 569)         $qras = $this->getAssignmentsByQr($qr);\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 570) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 571)         foreach ($qras as $ass) {\nc04e5aff (Philippe Roussille 2017-03-08 11:11:16 +0100 572)             if ($ass->getId() !== $qra->getId() && in_array($ass->getStatus(), ['assigned', 'accepted'])) {\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 573)                 $allNoSale = false;\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 574)             }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 575)         }\nc04e5aff (Philippe Roussille 2017-03-08 11:11:16 +0100 576) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 577)         $this->qrLogger->log('qra_no_sale', $qr, $this->user, $qra, $reason);\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 578) \nc04e5aff (Philippe Roussille 2017-03-08 11:11:16 +0100 579)         if ('in_progress' == $qr->getStatus() && $allNoSale) {\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 580)             $qr->setStatus('no_sale');\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 581)             $this->qrLogger->log('noSale', $qr, $this->user);\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 582)         }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 583) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 584)         $this->em->flush();\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 585) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 586)     }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 587) \n27c0ad1a (Philippe Roussille 2017-04-11 17:43:05 +0200 588)     public function qraSale(QuoteRequest $qr, $reason = null, $params = [])\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 589)     {\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 590)         if (! $qr->isAssignedToRetailer($this->user->getRetailerProfile())) {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 591)             throw new \\InvalidArgumentException(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 592)                 sprintf('Logged user (%s) is not assigned to QuoteRequest #%d', $this->user->getEmail(), $qr->getId())\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 593)             );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 594)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 595) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 596)         $qra = $qr->getCurrentAssignment();\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 597)         if (null === $qra) {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 598)             throw new \\InvalidArgumentException(\"Impossible de trouver l'assignation de la QR #{$qr->getId()}\");\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 599)         }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 600) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 601)         $qra->setStatus('won');\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 602) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 603)         $qr = $qra->getQuoteRequest();\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 604)         $qr\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 605)            ->setStatus('sale')\n27c0ad1a (Philippe Roussille 2017-04-11 17:43:05 +0200 606)            ->setSaleOrderRef(isset($params['orderRef']) ? $params['orderRef'] : null)\n27c0ad1a (Philippe Roussille 2017-04-11 17:43:05 +0200 607)            ->setSaleOrderDate(isset($params['orderDate']) ? $params['orderDate'] : null)\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 608)         ;\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 609) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 610)         $qras = $this->getAssignmentsByQr($qr);\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 611)         foreach ($qras as $ass) {\ne5bfda99 (Philippe Roussille 2017-03-08 10:21:01 +0100 612)             if ($ass->getId() !== $qra->getId()) {\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 613)                 $ass->setStatus('lost');\na9e8e57a (Philippe Roussille 2017-03-08 10:26:43 +0100 614)                 $this->qrLogger->log('qra_lost', $qr, $this->user, $ass);\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 615)             }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 616)         }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 617) \n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 618)         $this->em->flush();\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 619) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 620)         $this->qrLogger->log('qra_sale', $qr, $this->user, $qra, $reason);\n5b9ed655 (Philippe Roussille 2015-10-20 17:27:51 +0200 621)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 622) \na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 623)     public function complete(QuoteRequest $qr)\na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 624)     {\na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 625)         $qr\na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 626)            ->setStatus('completed')\na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 627)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 628) \na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 629)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 630) \na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 631)         $this->qrLogger->log('complete', $qr, $this->user);\na381362a (Philippe Roussille 2016-03-02 10:48:33 +0100 632)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 633) \nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 634)     public function nurturing(QuoteRequest $qr, $date, $reason)\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 635)     {\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 636)         $qr\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 637)            ->setStatus('nurturing')\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 638)            ->setNurturingAt($date)\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 639)         ;\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 640) \nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 641)         $this->em->flush();\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 642) \nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 643)         $this->removeAssignmentsForQr($qr);\nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 644) \nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 645)         $this->qrLogger->log('nurturing', $qr, $this->user, null, $reason);\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 646)     }\nca62f9b8 (Philippe Roussille 2017-03-07 14:51:45 +0100 647) \nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 648)     public function awake(QuoteRequest $qr)\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 649)     {\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 650)         $qr\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 651)            ->setStatus('unassigned')\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 652)            ->setNurturingAt(null)\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 653)         ;\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 654) \nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 655)         $this->em->flush();\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 656) \nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 657)         $this->removeAssignmentsForQr($qr);\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 658) \nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 659)         $this->qrLogger->log('awake', $qr, $this->user);\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 660)     }\nbd797297 (Philippe Roussille 2017-03-09 17:48:43 +0100 661) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 662)     public function refuse(QuoteRequest $qr, $reason = null)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 663)     {\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 664)         if ($this->user && ! $qr->isAssignedToRetailer($this->user->getRetailerProfile())) {\n2175bdc2 (Thibaut Selingue   2017-05-22 18:36:24 +0200 665)             throw new \\InvalidArgumentException(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 666)                 sprintf('Logged user (%s) is not assigned to QuoteRequest #%d', $this->user->getEmail(), $qr->getId())\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 667)             );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 668)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 669) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 670)         $qra = $qr->getCurrentAssignment();\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 671)         $qra\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 672)             ->setStatus('refused')\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 673)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 674) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 675)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 676) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 677)         if ($qr->isPro()) {\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 678)             // Mail Commercial Terrain\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 679)             $this->mailer->mail(\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 680)                 $qr->getCommercialBinomial()->getTerrainCommercial()->getUser()->getEmail(),\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 681)                 'commercial',\nc1f3da56 (Philippe Roussille 2017-03-17 10:31:11 +0100 682)                 'qr_refuse_notif',\nc1f3da56 (Philippe Roussille 2017-03-17 10:31:11 +0100 683)                 array('qr' => $qr, 'qra' => $qra)\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 684)             );\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 685)         } else {\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 686)             // Mail Commercial Sédentaire\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 687)             $this->mailer->mail(\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 688)                 $qr->getCommercialBinomial()->getSedentaryCommercial()->getUser()->getEmail(),\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 689)                 'commercial',\nc1f3da56 (Philippe Roussille 2017-03-17 10:31:11 +0100 690)                 'qr_refuse_notif',\nc1f3da56 (Philippe Roussille 2017-03-17 10:31:11 +0100 691)                 array('qr' => $qr, 'qra' => $qra)\nc1f3da56 (Philippe Roussille 2017-03-17 10:31:11 +0100 692)             );\nc1f3da56 (Philippe Roussille 2017-03-17 10:31:11 +0100 693)         }\nc1f3da56 (Philippe Roussille 2017-03-17 10:31:11 +0100 694) \ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 695)         $this->checkRefuse($qr);\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 696) \nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 697)         $this->qrLogger->log('refuse', $qr, $this->user, $qra, $reason);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 698)     }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 699) \ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 700)     public function checkRefuse(QuoteRequest $qr)\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 701)     {\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 702)         //== Cas où les trois pro ont refusés ou manqués le lead.\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 703)         $allRefused = true;\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 704)         $qras = $this->getAssignmentsByQr($qr);\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 705) \n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 706)         foreach ($qras as $ass) {\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 707)             if (!in_array($ass->getStatus(), array_keys(QuoteRequestAssignment::$refusedStatus))) {\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 708)                 $allRefused = false;\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 709)             }\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 710)         }\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 711) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 712)         $assignLog = $this->getLogByQr($qr, 'assign');\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 713)         $assignDate = $assignLog ? $assignLog->getCreatedAt() : null;\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 714)         if ($qr->getStatus() == 'assigned' && $allRefused) {\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 715) \nd7797791 (Philippe Roussille 2017-03-24 14:34:26 +0100 716)             $qr->setStatus('unassigned');\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 717)             $this->em->flush();\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 718) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 719)             $this->mailer->mail(\nd7797791 (Philippe Roussille 2017-03-24 14:34:26 +0100 720)                 $qr->getDefaultCommercial()->getUser()->getEmail(),\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 721)                 'commercial',\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 722)                 'qr_all_refuse_notif',\n6d89b034 (Corentin RICHARD   2017-03-06 14:01:20 +0100 723)                 array('qr' => $qr, 'qra' => $qras, 'date' => $assignDate),\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 724)                 $this->getQrAdminRecipient(true)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 725)             );\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 726)         }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 727)         //!== Fin\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 728) \ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 729)         return $allRefused;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 730)     }\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 731) \ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 732)     public function missed(QuoteRequestAssignment $qra)\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 733)     {\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 734)         $qra->setStatus('missed');\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 735)         $this->em->flush();\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 736)         $this->checkRefuse($qra->getQuoteRequest());\ncdd6acf5 (Corentin RICHARD   2017-03-07 12:26:55 +0100 737)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 738)     public function cancel(QuoteRequest $qr, $reason)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 739)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 740)         $qr\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 741)            ->setStatus('cancelled')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 742)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 743) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 744)         $this->em->flush();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 745) \n2fa7fef2 (Philippe Roussille 2017-03-02 18:09:10 +0100 746)         $this->qrLogger->log('cancel', $qr, $this->user, null, $reason);\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 747)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 748) \n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 749)     /**\n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 750)      * Commenter une demande de devis.\n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 751)      * Mail envoyé aux commerciaux du binome.\n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 752)      * @param QuoteRequest $qr\n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 753)      * @param $comment\n2b053e0e (Corentin RICHARD   2017-03-08 12:02:12 +0100 754)      */\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 755)     public function comment(QuoteRequest $qr, $comment)\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 756)     {\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 757)         $recipients =$cc = [];\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 758) \nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 759)         $cb = $qr->getCommercialBinomial();\nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 760)         if (null === $cb) {\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 761)             $recipients = $this->getQrAdminRecipient();\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 762)         } else {\nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 763)             $sc = $cb->getSedentaryCommercial();\nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 764)             $tc = $cb->getTerrainCommercial();\nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 765)             $recipients[$sc->getUser()->getEmail()] = (string) $sc->getUser();\nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 766)             $recipients[$tc->getUser()->getEmail()] = (string) $tc->getUser();\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 767)         }\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 768) \nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 769)         //  si la personne qui fait le commentaire est dans les destinataires on la retire\nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 770)         if (isset($recipients[$comment->getUser()->getEmail()])) {\nbcfe0cbe (Philippe Roussille 2017-03-08 10:07:50 +0100 771)             unset($recipients[$comment->getUser()->getEmail()]);\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 772)         }\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 773) \ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 774)         // Si c'est une réponse\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 775)         if (($parent = $comment->getParent()) && $comment->getUser()->getId() !== $comment->getParent()->getUser()->getId()) {\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 776)             $cc = $recipients;\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 777)             $recipients = [$parent->getUser()->getEmail()];\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 778)         }\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 779) \ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 780)         if ($recipients) {\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 781)             $this->mailer->mail(\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 782)                 $recipients,\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 783)                 'admin',\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 784)                 'qr_comment_notif',\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 785)                 array('qr' => $qr, 'comment' => $comment),\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 786)                 [], // Bcc\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 787)                 $cc // Cc\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 788)             );\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 789)         }\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 790)     }\ndcc3a1ad (Philippe Roussille 2016-04-01 12:30:12 +0200 791) \n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 792)     public function removeAssignmentsForQr(QuoteRequest $qr)\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 793)     {\nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 794)         $qras = $this->getAssignmentsByQr($qr);\nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 795)         foreach ($qras as $qra) {\nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 796)             $this->em->remove($qra);\nc99f76aa (Philippe Roussille 2017-03-07 15:07:12 +0100 797)         }\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 798)         $this->em->flush();\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 799)     }\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 800) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 801)     public function getLogByQr(QuoteRequest $qr, $action)\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 802)     {\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 803)         $qb = $this->em->getRepository('Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequestLog')->createQueryBuilder('qrl');\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 804) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 805)         $qb\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 806)             ->where('qrl.quoteRequest = :qr')\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 807)             ->andWhere('qrl.action = :action')\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 808)             ->setParameter('qr', $qr)\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 809)             ->setParameter('action', $action)\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 810)             ->setMaxResults(1)\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 811)         ;\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 812) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 813)         $pos = $qb->getQuery()->getOneOrNullResult();\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 814)         return $pos;\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 815)     }\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 816) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 817)     /**\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 818)      * Retourne les assignement pour une qr donnée.\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 819)      * @param QuoteRequest $qr\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 820)      * @return array\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 821)      */\nf6897f53 (Philippe Roussille 2017-03-06 17:15:17 +0100 822)     public function getAssignmentsByQr(QuoteRequest $qr) {\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 823) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 824)         $qb = $this->em->getRepository('Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequestAssignment')->createQueryBuilder('qra');\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 825) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 826)         $qb\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 827)             ->where('qra.quoteRequest = :qr')\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 828)             ->setParameter('qr', $qr)\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 829)         ;\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 830) \n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 831)         $ass = $qb->getQuery()->getResult();\n575573a9 (Corentin RICHARD   2017-03-06 16:49:15 +0100 832)         return $ass;\n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 833) \n75ac354b (Corentin RICHARD   2017-03-03 16:49:37 +0100 834)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 835) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 836)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 837)      * Retourne l'email de notification de création des demandes de devis\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 838)      * @return array    Adresse email en clé, Prénom Nom en valeur\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 839)      */\n40a844ea (Philippe Roussille 2016-03-18 10:35:52 +0100 840)     public function getQrAdminRecipient($cc = false)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 841)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 842)         $qb = $this->em->getRepository($this->options['userClass'])->createQueryBuilder('u');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 843) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 844)         $qb\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 845)            ->select('u.email, u.lastname, u.firstname')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 846)            ->innerJoin('u.directRoles', 'dr', 'WITH', 'dr.role = :neededRole')\n40a844ea (Philippe Roussille 2016-03-18 10:35:52 +0100 847)            ->setParameter('neededRole', 'ROLE_EMAIL_ADMIN_DEMANDE_DEVIS' . ($cc ? '_COPIE' : ''))\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 848)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 849) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 850)         $users = $qb->getQuery()->getArrayResult();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 851) \nde18735f (Philippe Roussille 2016-03-23 15:33:47 +0100 852)         $recipient = [];\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 853) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 854)         if (!empty($users)) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 855)             foreach ($users as $user) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 856)                 $recipient[$user['email']] =$user['firstname'] . ' ' . $user['lastname'];\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 857)             }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 858)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 859) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 860)         return $recipient;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 861)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 862) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 863)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 864)      * Retourne l'utilisateur pro, destinataire des notifications d'attribution de demandes de devis\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 865)      * @param  PointOfSale  $pos\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 866)      * @return mixed        NULL ou User\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 867)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 868)     public function getQrProUser(PointOfSale $pos)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 869)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 870)         $qb = $this->em->getRepository($this->options['userClass'])->createQueryBuilder('u');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 871) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 872)         $qb\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 873)            // Pas de gestion d'un User avec le rôle de réception de mail\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 874)            // ->innerJoin('u.directRoles', 'dr', 'WITH', 'dr.role = :neededRole')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 875)            // ->setParameter('neededRole', 'ROLE_EMAIL_PRO_DEMANDE_DEVIS')\n8b037185 (Philippe Roussille 2015-12-07 14:48:03 +0100 876)            ->innerJoin('u.retailerProfile', 'rp')\n8b037185 (Philippe Roussille 2015-12-07 14:48:03 +0100 877)            ->innerJoin('rp.pointOfSales', 'pos')\n8b037185 (Philippe Roussille 2015-12-07 14:48:03 +0100 878)            ->andWhere('pos IN (:pos)')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 879)            ->setParameter('pos', $pos)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 880)            ->setMaxResults(1)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 881)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 882) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 883)         return $qb->getQuery()->getOneOrNullResult();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 884)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 885) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 886)     /**\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 887)      * Retourne l'email du distributeur référent\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 888)      * @param  PointOfSale $pos\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 889)      * @return mixed    NULL ou array: Adresse email en clé, Prénom Nom en valeur\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 890)      */\n3a9852fe (Philippe Roussille 2015-12-14 14:06:39 +0100 891)     public function getPosDistributeur(PointOfSale $pos)\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 892)     {\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 893)         $bccRecipient = [];\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 894) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 895)         $retailerRef = $pos->getRetailerRef();\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 896)         if ($retailerRef) {\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 897)             $qb = $this->em->getRepository($this->options['userClass'])->createQueryBuilder('u');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 898) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 899)             $qb\n8b037185 (Philippe Roussille 2015-12-07 14:48:03 +0100 900)                ->innerJoin('u.retailerProfile', 'rp')\n8b037185 (Philippe Roussille 2015-12-07 14:48:03 +0100 901)                ->innerJoin('rp.pointOfSales', 'pos')\n8b037185 (Philippe Roussille 2015-12-07 14:48:03 +0100 902)                ->andWhere('pos IN (:pos)')\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 903)                ->setParameter('pos', $retailerRef)\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 904)                ->setMaxResults(1)\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 905)             ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 906) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 907)             $retailerRefUser = $qb->getQuery()->getOneOrNullResult();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 908) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 909)             if ($retailerRefUser) {\n1e6a60a9 (Philippe Roussille 2015-12-16 11:08:06 +0100 910)                 $bccRecipient[] = $retailerRefUser->getEmail();\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 911)             }\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 912)         }\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 913) \nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 914)         return $bccRecipient;\nbf4a692e (alterphp           2015-04-01 20:40:12 +0200 915)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 916) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 917)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 918)      * Retourne l'email de notification de création des demandes d'information\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 919)      * @return mixed    NULL ou array: Adresse email en clé, Prénom Nom en valeur\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 920)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 921)     public function getInquiryAdminRecipient()\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 922)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 923)         $qb = $this->em->getRepository($this->options['userClass'])->createQueryBuilder('u');\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 924) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 925)         $qb\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 926)            ->select('u.email, u.lastname, u.firstname')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 927)            ->innerJoin('u.directRoles', 'dr', 'WITH', 'dr.role = :neededRole')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 928)            ->setParameter('neededRole', 'ROLE_EMAIL_ADMIN_DEMANDE_INFOS')\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 929)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 930) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 931)         $users = $qb->getQuery()->getArrayResult();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 932) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 933)         $recipient = null;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 934) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 935)         if (!empty($users)) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 936)             $recipient = array();\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 937)             foreach ($users as $user) {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 938)                 $recipient[$user['email']] =$user['firstname'] . ' ' . $user['lastname'];\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 939)             }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 940)         }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 941) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 942)         return $recipient;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 943)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 944) \ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 945)     /**\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 946)      * Option RESOLVER\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 947)      */\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 948)     public function setDefaultOptions(OptionsResolverInterface $resolver)\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 949)     {\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 950)         $resolver\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 951)             ->setRequired(array(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 952)                 'leadActivityClass',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 953)                 'countryClass',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 954)                 'userClass',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 955)                 'projectSite',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 956)             ))\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 957)             ->setDefaults(array(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 958)                 'leadActivityClass' => 'Panaget\\SiteBundle\\Entity\\Lead\\LeadActivity',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 959)                 'countryClass'      => 'Panaget\\SiteBundle\\Entity\\Core\\Country',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 960)                 'userClass'         => 'Panaget\\SiteBundle\\Entity\\Core\\User',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 961)             ))\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 962)             ->setOptional(array(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 963)                 // ...\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 964)             ))\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 965)             ->setAllowedTypes(array(\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 966)                 'leadActivityClass' => 'string',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 967)                 'countryClass'      => 'string',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 968)                 'userClass'         => 'string',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 969)                 'projectSite'       => 'string',\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 970)             ))\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 971)         ;\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 972)     }\ne9751e6f (alterphp           2015-03-30 17:43:02 +0200 973) }\n",
			"settings":
			{
				"buffer_size": 88971,
				"line_ending": "Unix",
				"name": "Git Blame",
				"read_only": true,
				"scratch": true
			}
		},
		{
			"contents": "Searching 2875 files for \"commercialbinomial\"\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/CommercialProfileController.php:\n    9  use PDO;\n   10  use Panaget\\AdminBundle\\Controller\\Traits\\ProfileController;\n   11: use Panaget\\AdminBundle\\Form\\CommercialBinomialsType;\n   12  use Panaget\\ExtranetBundle\\Form\\PointOfSaleType;\n   13  use Symfony\\Component\\Form\\FormInterface;\n   ..\n  326          $formBuilder = $this->createFormBuilder();\n  327  \n  328:         $binomials = $this->get('doctrine')->getRepository('Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial')\n  329              ->createQueryBuilder('cb')\n  330              ->addSelect('sc', 'scu', 'tc', 'tcu')\n  ...\n  341          $formBuilder\n  342              ->add('binomials', 'collection', [\n  343:                 'type' => new CommercialBinomialsType(),\n  344                  'allow_add' => true,\n  345                  'allow_delete' => true,\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/DashboardController.php:\n  133                                  'commercial'      => $commercial['commercial'],\n  134                                  'commercialId'    => $commercial['commercialId'],\n  135:                                 'commercialBinomial' => $commercial['commercialBinomial'],\n  136                                  'conversionRate'  => $conversionRate,\n  137                              ];\n  ...\n  180                                  'commercial'      => $commercial['commercial'],\n  181                                  'commercialId'    => $commercial['commercialId'],\n  182:                                 'commercialBinomial' => $commercial['commercialBinomial'],\n  183                                  'conversionRate'  => $conversionRate,\n  184                              ];\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php:\n   75             ->leftJoin('qr.leadActivity', 'la')\n   76             ->leftJoin('qr.assignments', 'qra')\n   77:            ->leftJoin('qr.commercialBinomial', 'cb')\n   78             ->leftJoin('la.country', 'cou')\n   79             ->leftJoin('qr.surveyAnswer', 'sa')\n   ..\n  478                  'orderable' => false,\n  479                  'process' => function ($data) {\n  480:                     if ($data->getCommercialBinomial()) {\n  481:                         return str_replace('/', '<br>', $data->getCommercialBinomial()->toString($data->getCommercialType()));\n  482                      }\n  483                  },\n  ...\n  619             ->leftJoin('qr.leadActivity', 'la')\n  620             ->leftJoin('qr.assignments', 'qra')\n  621:            ->leftJoin('qr.commercialBinomial', 'cb')\n  622             ->leftJoin('qra.pointOfSale', 'pos')\n  623             ->leftJoin('la.civility', 'civ')\n  ...\n  703                  $this->get('session')->getFlashBag()->add(\n  704                      'warning',\n  705:                     $this->get('translator')->trans('quote_request_assignment.show.too_late', ['%binomial%' => (string) $entity->getCommercialBinomial()])\n  706                  );\n  707                  $redirectTo = $this->get('router')->generate($this->getRoute('list'));\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/CommercialBinomialsType.php:\n   13  use Symfony\\Component\\Validator\\Constraints;\n   14  \n   15: class CommercialBinomialsType extends AbstractType\n   16  {\n   17      public function buildForm(FormBuilderInterface $builder, array $options)\n   ..\n   50      {\n   51          $resolver->setDefaults(array(\n   52:             'data_class' => 'Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial',\n   53          ));\n   54      }\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestAdminHandler.php:\n   26              case 'refused':\n   27                  if ($form->get('delegateTerrain')->isClicked()) {\n   28:                     $this->qrManager->delegate($form->getData(), $form->get('commercialBinomial')->getData(), 'terrain');\n   29                  }\n   30                  if ($form->get('delegateSedentary')->isClicked()) {\n   31:                     $this->qrManager->delegate($form->getData(), $form->get('commercialBinomial')->getData(), 'sedentary');\n   32                  }\n   33                  if ($form->get('cancel')->isClicked()) {\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestCommercialHandler.php:\n   41                  }\n   42                  if ($form->get('delegateTerrain')->isClicked()) {\n   43:                     $this->qrManager->delegate($form->getData(), $form->get('commercialBinomial')->getData(), 'terrain');\n   44                  }\n   45                  if ($form->get('delegateSedentary')->isClicked()) {\n   46:                     $this->qrManager->delegate($form->getData(), $form->get('commercialBinomial')->getData(), 'sedentary');\n   47                  }\n   48  \n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestSectionHandler.php:\n   24              case 'refused':\n   25                  if ($form->get('delegate')->isClicked()) {\n   26:                     $this->qrManager->delegate($form->getData(), $form->get('commercialBinomial')->getData());\n   27                  }\n   28                  if ($form->get('cancel')->isClicked()) {\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestWithoutProjectHandler.php:\n   26                  }\n   27                  if ($form->get('delegate')->isClicked()) {\n   28:                     $this->qrManager->delegate($form->getData(), $form->get('commercialBinomial')->getData());\n   29                  }\n   30                  if ($form->get('cancel')->isClicked()) {\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestAdminType.php:\n   47                          'collapsed_confirmation' => true,\n   48                      ))\n   49:                     ->add('commercialBinomial', 'entity', array(\n   50                          'attr' => [\n   51                              'class' => 'select2',\n   ..\n   55                          'mapped' => true,\n   56                          'in_collapse_confirmation' => 'collapse-for-admin_quote_request_admin_delegateTerrain',\n   57:                         'class' => 'Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial',\n   58                          'query_builder' =>  function (EntityRepository $er) {\n   59                              $qb = $er->createQueryBuilder('cb')\n   ..\n  157                      if (($form->has('delegateTerrain') || $form->has('delegateSedentary'))\n  158                          && ($form->get('delegateTerrain')->isClicked() || $form->get('delegateSedentary')->isClicked())) {\n  159:                         $errors = $this->validator->validateValue($form->get('commercialBinomial')->getData(), $notNullConstraint);\n  160                          if (count($errors) > 0) {\n  161:                             $form->get('commercialBinomial')->addError(new FormError($errors[0]->getMessage()));\n  162                          }\n  163                      }\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestCommercialType.php:\n   34      {\n   35          $qrStatus = $this->qr->getStatus();\n   36:         $binomial = $this->qr->getCommercialBinomial();\n   37  \n   38          // if (in_array($qrStatus, ['unassigned'])) {\n   ..\n   99                          'collapsed_confirmation' => true,\n  100                      ))\n  101:                     ->add('commercialBinomial', 'entity', array(\n  102                          'attr' => [\n  103                              'class' => 'select2',\n  ...\n  107                          'mapped' => true,\n  108                          'in_collapse_confirmation' => 'collapse-for-admin_quote_request_commercial_delegateTerrain',\n  109:                         'class' => 'Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial',\n  110                          'query_builder' =>  function (EntityRepository $er) {\n  111                              $qb = $er->createQueryBuilder('cb')\n  ...\n  256  \n  257                      if ($form->get('delegateTerrain')->isClicked() || $form->get('delegateSedentary')->isClicked()) {\n  258:                         $errors = $this->validator->validateValue($form->get('commercialBinomial')->getData(), $notNullConstraint);\n  259                          if (count($errors) > 0) {\n  260:                             $form->get('commercialBinomial')->addError(new FormError($errors[0]->getMessage()));\n  261                          }\n  262                      }\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestSectionType.php:\n   63                          'collapsed_confirmation' => true,\n   64                      ))\n   65:                     ->add('commercialBinomial', 'entity', array(\n   66                          'attr' => [\n   67                              'class' => 'select2',\n   ..\n   71                          'mapped' => true,\n   72                          'in_collapse_confirmation' => 'collapse-for-admin_quote_request_commercial_delegate',\n   73:                         'class' => 'Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial',\n   74                          'query_builder' =>  function (EntityRepository $er) use ($commercialIds) {\n   75                              $qb = $er->createQueryBuilder('cb')\n   ..\n  154                      $notNullConstraint = new Constraints\\NotNull();\n  155                      if ($form->get('delegate')->isClicked()) {\n  156:                         $errors = $this->validator->validateValue($form->get('commercialBinomial')->getData(), $notNullConstraint);\n  157                          if (count($errors) > 0) {\n  158:                             $form->get('commercialBinomial')->addError(new FormError($errors[0]->getMessage()));\n  159                          }\n  160                      }\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestWithoutProjectType.php:\n   73                          'collapsed_confirmation' => true,\n   74                      ))\n   75:                     ->add('commercialBinomial', 'entity', array(\n   76                          'attr' => [\n   77                              'class' => 'select2',\n   ..\n   81                          'mapped' => true,\n   82                          'in_collapse_confirmation' => 'collapse-for-admin_quote_request_without_project_delegate',\n   83:                         'class' => 'Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial',\n   84                          'query_builder' =>  function (EntityRepository $er) {\n   85                              return $er->createQueryBuilder('cb')\n\n/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Lead/QuoteRequestAdmin/show.html.twig:\n   77        <div class=\"panel-heading\"><i class=\"fa fa-cog\"></i> Actions</div>\n   78        <div class=\"panel-body\">\n   79:         {% if entity.commercialBinomial %}\n   80            <dl class=\"dl-horizontal\">\n   81              <dt>{{ 'quote_request.show.commercial'|trans }}</dt>\n   82:             <dd>{{ entity.commercialBinomial.toString(entity.commercialType) }}</dd>\n   83            </dl>\n   84          {% endif %}\n   ..\n  227      </div>\n  228      {% endif %}\n  229:     {# {% if is_granted(['ROLE_GROUP_COMMERCIAUX', 'ROLE_GROUP_SECTION', 'ROLE_ADMIN']) and entity.commercialBinomial|default %}\n  230      <div class=\"panel panel-primary\">\n  231        <a data-toggle=\"collapse\" data-parent=\"#comments\" href=\"#collapseBinomial\" class=\"collapsed\">\n  232:         <div class=\"panel-heading\"><h4>{{ 'quote_request.comments.binomial'|trans({'%binomial%': entity.commercialBinomial.toString}) }}</h4>\n  233            <div class=\"options\">\n  234              <div class=\"count\"></div>\n  ...\n  238        <div id=\"collapseBinomial\" class=\"panel-collapse collapse\" style=\"height: 0px;\">\n  239          <div class=\"panel-body\">\n  240:           <div data-comment=\"true\" data-class=\"QuoteRequest_CommercialBinomial\" data-id=\"{{ entity.id }}_{{ entity.commercialBinomial.id }}\" data-locale=\"{{ app.request.locale }}\">\n  241              <i class=\"fa fa-spinner fa-spin\"></i>\n  242            </div>\n\n/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php:\n    8  \n    9  /**\n   10:  * @ORM\\Entity(repositoryClass=\"Panaget\\SiteBundle\\Entity\\Core\\Repository\\CommercialBinomialRepository\")\n   11   */\n   12: class CommercialBinomial\n   13  {\n   14      use TimestampableEntity, BlameableEntity;\n   ..\n   32  \n   33      /**\n   34:      * @ORM\\OneToMany(targetEntity=\"Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequest\", mappedBy=\"commercialBinomial\")\n   35       */\n   36      protected $quoteRequests;\n   ..\n   74       *\n   75       * @param \\Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile $sedentaryCommercial\n   76:      * @return CommercialBinomial\n   77       */\n   78      public function setSedentaryCommercial(\\Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile $sedentaryCommercial = null)\n   ..\n   97       *\n   98       * @param \\Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile $terrainCommercial\n   99:      * @return CommercialBinomial\n  100       */\n  101      public function setTerrainCommercial(\\Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile $terrainCommercial = null)\n  ...\n  120       *\n  121       * @param \\Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequest $quoteRequests\n  122:      * @return CommercialBinomial\n  123       */\n  124      public function addQuoteRequest(\\Panaget\\SiteBundle\\Entity\\Lead\\QuoteRequest $quoteRequests)\n\n/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/CommercialProfile.php:\n   49  \n   50      /**\n   51:      * @ORM\\OneToMany(targetEntity=\"Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial\", mappedBy=\"sedentaryCommercial\")\n   52       */\n   53      protected $sedentaryBinomials;\n   54  \n   55      /**\n   56:      * @ORM\\OneToMany(targetEntity=\"Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial\", mappedBy=\"terrainCommercial\")\n   57       */\n   58      protected $terrainBinomials;\n   ..\n  272       * Add sedentaryBinomials\n  273       *\n  274:      * @param \\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $sedentaryBinomials\n  275       * @return CommercialProfile\n  276       */\n  277:     public function addSedentaryBinomial(\\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $sedentaryBinomials)\n  278      {\n  279          $this->sedentaryBinomials[] = $sedentaryBinomials;\n  ...\n  285       * Remove sedentaryBinomials\n  286       *\n  287:      * @param \\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $sedentaryBinomials\n  288       */\n  289:     public function removeSedentaryBinomial(\\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $sedentaryBinomials)\n  290      {\n  291          $this->sedentaryBinomials->removeElement($sedentaryBinomials);\n  ...\n  305       * Add terrainBinomials\n  306       *\n  307:      * @param \\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $terrainBinomials\n  308       * @return CommercialProfile\n  309       */\n  310:     public function addTerrainBinomial(\\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $terrainBinomials)\n  311      {\n  312          $this->terrainBinomials[] = $terrainBinomials;\n  ...\n  318       * Remove terrainBinomials\n  319       *\n  320:      * @param \\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $terrainBinomials\n  321       */\n  322:     public function removeTerrainBinomial(\\Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial $terrainBinomials)\n  323      {\n  324          $this->terrainBinomials->removeElement($terrainBinomials);\n\n/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/Repository/CommercialBinomialRepository.php:\n   12  \n   13  \n   14: class CommercialBinomialRepository extends EntityRepository\n   15  {\n   16  \n   17:     public function getCommercialBinomialForPos(PointOfSale $pointOfSale)\n   18      {\n   19          $qb = $this->createQueryBuilder('cb');\n\n/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php:\n   12  use Panaget\\SiteBundle\\Behavior\\StatusableHelper;\n   13  use Panaget\\SiteBundle\\Entity\\Catalog\\Product;\n   14: use Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial;\n   15  use Panaget\\SiteBundle\\Entity\\Core\\PointOfSale;\n   16  use Panaget\\SiteBundle\\Entity\\Core\\RetailerProfile;\n   ..\n  122  \n  123      /**\n  124:      * @ORM\\ManyToOne(targetEntity=\"Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial\", inversedBy=\"quoteRequests\")\n  125       * @ORM\\JoinColumn(onDelete=\"SET NULL\")\n  126       */\n  127:     protected $commercialBinomial;\n  128  \n  129      /**\n  ...\n  588  \n  589  \n  590:     public function setCommercialBinomial(CommercialBinomial $commercialBinomial = null)\n  591      {\n  592:         $this->commercialBinomial = $commercialBinomial;\n  593  \n  594          return $this;\n  595      }\n  596  \n  597:     public function getCommercialBinomial()\n  598      {\n  599:         return $this->commercialBinomial;\n  600      }\n  601  \n  ...\n  707      public function getDefaultCommercial()\n  708      {\n  709:         if ($this->getCommercialBinomial()) {\n  710              return $this->getCommercialType() == 'terrain'\n  711:                 ? $this->getCommercialBinomial()->getTerrainCommercial()\n  712:                 : $this->getCommercialBinomial()->getSedentaryCommercial()\n  713              ;\n  714          }\n  ...\n  717      public function getOtherCommercial()\n  718      {\n  719:         if ($this->getCommercialBinomial()) {\n  720              return $this->getCommercialType() == 'sedentary'\n  721:                 ? $this->getCommercialBinomial()->getTerrainCommercial()\n  722:                 : $this->getCommercialBinomial()->getSedentaryCommercial()\n  723              ;\n  724          }\n\n/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/Repository/QuoteRequestRepository.php:\n   99              ->createQueryBuilder('qr')\n  100              ->addSelect('cb', 'sc', 'tc')\n  101:             ->innerJoin('qr.commercialBinomial', 'cb')\n  102              ->innerJoin('cb.sedentaryCommercial', 'sc')\n  103              ->innerJoin('cb.terrainCommercial', 'tc')\n  ...\n  175              ->innerJoin('PanagetSiteBundle:Core\\Region', 'region', 'WITH', 'region.id = department.region')\n  176  \n  177:             ->leftJoin('qr.commercialBinomial', 'cb')\n  178               ->andWhere('cb.sedentaryCommercial IN (:commercial_id) OR cb.terrainCommercial IN (:commercial_id)')\n  179               ->setParameter('commercial_id', $commercialProfile->getId())\n  ...\n  279              // ->addSelect(\"CONCAT(comTerU.email, ' + ', comSedU.email) AS commercialEmail\")\n  280              // ->addSelect(\"CONCAT(comTerU.id, ' + ', comSedU.id) AS commercialId\")\n  281:             ->addSelect(\"CONCAT(comTerU.firstname, ' ', comTerU.lastname, ' / ', comSedU.firstname, ' ', comSedU.lastname) AS commercialBinomial\")\n  282              ->addSelect(\"cb.id AS commercialId\")\n  283  \n  ...\n  297  \n  298              ->leftJoin('la.country', 'laC')\n  299:             ->innerJoin('qr.commercialBinomial', 'cb')\n  300              ->leftJoin('cb.terrainCommercial', 'comTer')\n  301              ->leftJoin('cb.sedentaryCommercial', 'comSed')\n  ...\n  341          foreach ($query->getScalarResult() as $value) {\n  342              $result[$value['section']][$value['commercialId']] = array_merge($value, [\n  343:                 'commercial' => strtoupper($value['commercialBinomial']),\n  344              ]);\n  345          }\n\n/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/QuoteRequest/Logger.php:\n  304              case 'noSale':\n  305                  $parameters = array(\n  306:                     '%user%'    => (string) $log->getQuoteRequest()->getCommercialBinomial(),\n  307:                     '%user_id%' => $log->getQuoteRequest()->getCommercialBinomial() ? $log->getQuoteRequest()->getCommercialBinomial()->getId() : '',\n  308                      '%qr_id%'   => $log->getQuoteRequest()->getId(),\n  309                  );\n  ...\n  359                      '%user%'        => $log->getUser()->getFirstname() . ' ' . $log->getUser()->getLastname(),\n  360                      '%user_id%'     => $log->getUser()->getId(),\n  361:                     '%commercial%'  => (string) $log->getQuoteRequest()->getCommercialBinomial(),\n  362                  );\n  363                  break;\n\n/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/QuoteRequest/Manager.php:\n    5  use LePhare\\Utils\\Date\\WorkingDays;\n    6  use Panaget\\SiteBundle\\Entity\\Cms\\InfoMessage;\n    7: use Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial;\n    8  use Panaget\\SiteBundle\\Entity\\Core\\CommercialProfile;\n    9  use Panaget\\SiteBundle\\Entity\\Core\\PointOfSale;\n   ..\n  245          $binomial = null;\n  246          if ($pos) {\n  247:             $binomial = $this->em->getRepository('Panaget\\SiteBundle\\Entity\\Core\\CommercialBinomial')->getCommercialBinomialForPos($pos);\n  248          }\n  249  \n  250          $qr\n  251             ->setStatus('new')\n  252:            ->setCommercialBinomial($binomial)\n  253          ;\n  254  \n  ...\n  411       * Délègue au binome.\n  412       * @param QuoteRequest $qr\n  413:      * @param CommercialBinomial $commercialBinomial\n  414       */\n  415      public function binomialSwitch(QuoteRequest $qr)\n  ...\n  428       * Remet à new la quoteRequest.\n  429       * @param QuoteRequest $qr\n  430:      * @param CommercialBinomial $commercialBinomial\n  431       */\n  432:     public function delegate(QuoteRequest $qr, CommercialBinomial $commercialBinomial, $type = null)\n  433      {\n  434          $qr\n  435:            ->setCommercialBinomial($commercialBinomial)\n  436             ->setCommercialType($type)\n  437             ->setStatus('unassigned')\n  ...\n  443               //Mail Commercial Terrain\n  444              $this->mailer->mail(\n  445:                 $qr->getCommercialBinomial()->getTerrainCommercial()->getUser()->getEmail(),\n  446                  'commercial',\n  447                  'qr_delegate_notif',\n  448                  array('qr' => $qr, 'pcom' => $this->user, '%project_site%' => $this->options['projectSite']),\n  449                  [], //BBC\n  450:                 array_merge([$qr->getCommercialBinomial()->getSedentaryCommercial()->getUser()->getEmail()], $this->getQrAdminRecipient(true)) //CC\n  451              );\n  452          } else {\n  453              //Mail Commercial Terrain\n  454              $this->mailer->mail(\n  455:                 $qr->getCommercialBinomial()->getSedentaryCommercial()->getUser()->getEmail(),\n  456                  'commercial',\n  457                  'qr_delegate_notif',\n  458                  array('qr' => $qr, 'pcom' => $this->user, '%project_site%' => $this->options['projectSite']),\n  459                  [], //BBC\n  460:                 array_merge([$qr->getCommercialBinomial()->getTerrainCommercial()->getUser()->getEmail()], $this->getQrAdminRecipient(true)) //CC\n  461              );\n  462          }\n  ...\n  678              // Mail Commercial Terrain\n  679              $this->mailer->mail(\n  680:                 $qr->getCommercialBinomial()->getTerrainCommercial()->getUser()->getEmail(),\n  681                  'commercial',\n  682                  'qr_refuse_notif',\n  ...\n  686              // Mail Commercial Sédentaire\n  687              $this->mailer->mail(\n  688:                 $qr->getCommercialBinomial()->getSedentaryCommercial()->getUser()->getEmail(),\n  689                  'commercial',\n  690                  'qr_refuse_notif',\n  ...\n  757          $recipients =$cc = [];\n  758  \n  759:         $cb = $qr->getCommercialBinomial();\n  760          if (null === $cb) {\n  761              $recipients = $this->getQrAdminRecipient();\n\n103 matches across 20 files\n",
			"settings":
			{
				"buffer_size": 23959,
				"line_ending": "Unix",
				"name": "Find Results",
				"scratch": true
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php",
			"settings":
			{
				"buffer_size": 3851,
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php",
			"settings":
			{
				"buffer_size": 25212,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_creation_notif.html.twig",
			"settings":
			{
				"buffer_size": 998,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Commercial/qr_creation_notif.html.twig",
			"settings":
			{
				"buffer_size": 845,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Commercial/qr_delegate_notif.html.twig",
			"settings":
			{
				"buffer_size": 712,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		},
		{
			"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/DailyEmailReminderCommand.php",
			"settings":
			{
				"buffer_size": 10985,
				"encoding": "UTF-8",
				"line_ending": "Unix"
			}
		}
	],
	"build_system": "",
	"build_system_choices":
	[
	],
	"build_varint": "",
	"command_palette":
	{
		"height": 357.0,
		"last_filter": "blame",
		"selected_items":
		[
			[
				"blame",
				"Git: Blame"
			],
			[
				"sql",
				"Set Syntax: SQL"
			],
			[
				"bla",
				"Git: Blame"
			],
			[
				"move",
				"File: Move"
			],
			[
				"re",
				"Indentation: Reindent Lines"
			],
			[
				"rei",
				"Indentation: Reindent Lines"
			],
			[
				"rena",
				"File: Rename"
			],
			[
				"upper",
				"Convert Case: Upper Case"
			],
			[
				"lower",
				"Convert Case: Lower Case"
			],
			[
				"remove",
				"Package Control: Remove Package"
			],
			[
				"install",
				"Package Control: Install Package"
			],
			[
				"typetodo",
				"TypeTodo: HTTP repository"
			],
			[
				"todo",
				"Set Syntax: typeTodo"
			],
			[
				"blam",
				"Git: Blame"
			],
			[
				"git stat",
				"Git: Status"
			],
			[
				"thmee",
				"Themr: List themes"
			],
			[
				"theme",
				"Themr: List themes"
			],
			[
				"thme",
				"Themr: List themes"
			],
			[
				"json",
				"JSON Reindent: reindent file or selection"
			],
			[
				"scheme",
				"ColorSchemeSelector: Select Color Scheme"
			],
			[
				"packa",
				"Package Control: List Packages"
			],
			[
				"sche",
				"ColorSchemeSelector: Select Color Scheme"
			],
			[
				"schele",
				"ColorSchemeSelector: Select Color Scheme"
			],
			[
				"reid",
				"Indentation: Reindent Lines"
			]
		],
		"width": 701.0
	},
	"console":
	{
		"height": 391.0,
		"history":
		[
			"import urllib.request,os,hashlib; h = '2915d1851351e5ee549c20394736b442' + '8bc59f460fa1548d1514676163dafc88'; pf = 'Package Control.sublime-package'; ipp = sublime.installed_packages_path(); urllib.request.install_opener( urllib.request.build_opener( urllib.request.ProxyHandler()) ); by = urllib.request.urlopen( 'http://packagecontrol.io/' + pf.replace(' ', '%20')).read(); dh = hashlib.sha256(by).hexdigest(); print('Error validating download (got %s instead of %s), please try manual install' % (dh, h)) if dh != h else open(os.path.join( ipp, pf), 'wb' ).write(by)"
		]
	},
	"distraction_free":
	{
		"menu_visible": true,
		"show_minimap": false,
		"show_open_files": false,
		"show_tabs": false,
		"side_bar_visible": false,
		"status_bar_visible": false
	},
	"expanded_folders":
	[
		"/home/roussillep/sandbox/panaget",
		"/home/roussillep/sandbox/panaget/app",
		"/home/roussillep/sandbox/panaget/src",
		"/home/roussillep/sandbox/panaget/src/LePhare",
		"/home/roussillep/sandbox/panaget/src/LePhare/Utils",
		"/home/roussillep/sandbox/panaget/src/LePhare/Utils/Date",
		"/home/roussillep/sandbox/panaget/src/Panaget",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/Lead",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Export",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/translations",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/Repository",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/config",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/translations",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Catalog",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Commercial",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Product",
		"/home/roussillep/sandbox/panaget/vendor",
		"/home/roussillep/sandbox/panaget/vendor/faros"
	],
	"file_history":
	[
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/QuoteRequest/Manager.php",
		"/home/roussillep/sandbox/panaget/src/LePhare/Utils/Date/WorkingDays.php",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170530112200.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/DashboardController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Dashboard/dashboard-admin.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/translations/messages.fr.yml",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Lead/QuoteRequestAdmin/show.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Catalog/Repository/ProductRepository.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Product/show.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Search/results.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Trend/_trend.html.twig",
		"/home/roussillep/sandbox/panaget/app/Resources/crontab.production",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/DailyEmailReminderCommand.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Export/CsvGenerator.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/HourlyEmailReminderCommand.php",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170516161202.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Controller/CatalogController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Catalog/Repository/ProductReferenceRepository.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestRetailerType.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestCommercialHandler.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestAdminHandler.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Controller/TrendController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Trend/index.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/Repository/CommercialBinomialRepository.php",
		"/home/roussillep/sandbox/panaget/src/LePhare/CommentBundle/Controller/CommentController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestRetailerHandler.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/QuoteRequest/Manager.php.old",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/translations/messages.en.yml",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/QuoteRequest/Logger.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_contact_15J_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Admin/qr_remind_48_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/Repository/QuoteRequestRepository.php",
		"/home/roussillep/sandbox/panaget/vendor/faros/avant-theme-bundle/Faros/AvantThemeBundle/Resources/views/themes/avant/Form/fields.html.twig",
		"/home/roussillep/sandbox/panaget/src/LePhare/Bundle/SurveyBundle/Resources/views/Form/fields.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Form/qr_actions.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Extension/SubmitExtension.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestCommercialType.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/PointOfSale.php",
		"/home/roussillep/sandbox/panaget/app/Resources/crontab.preprod",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/DailyLeadExportToCegidCommand.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestAdminType.php",
		"/home/roussillep/sandbox/panaget/app/config/capistrano/stages/preprod.rb",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/PointOfSaleController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Lead/QuoteRequestAdmin/list.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Pro/qr_remind_15J_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Commercial/qr_all_refuse_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_all_refuse_notif.html.twig",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170323170902.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Mailer/Mailer.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/QuoteRequestLog.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/config/log_actions.yml",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/User/qr_remind_21J_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/User/qr_remind_21J_notif.html.twig",
		"/home/roussillep/sandbox/panaget/vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Compiler/CheckReferenceValidityPass.php",
		"/home/roussillep/sandbox/panaget/vendor/gedmo/doctrine-extensions/lib/Gedmo/Exception.php",
		"/home/roussillep/sandbox/panaget/vendor/faros/qb-bundle/Faros/QBBundle/Controller/QueryController.php",
		"/home/roussillep/sandbox/panaget/web/bundles/lepharecomment/libs/jquery-comment/js/jquery.comment.js",
		"/home/roussillep/sandbox/panaget/web/bundles/lepharecomment/js/comment.js",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/public/less/admin.less",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/RetailerProfile.php",
		"/home/roussillep/sandbox/panaget/src/LePhare/CommentBundle/Resources/config/routing.yml",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/CommercialProfileController.php",
		"/home/roussillep/sandbox/panaget/node_modules/gulp-less/test/fixtures/buttons.less",
		"/home/roussillep/sandbox/panaget/web/bundles/panagetadmin/libs/bootstrap-3.3.5/less/mixins.less",
		"/home/roussillep/sandbox/panaget/web/bundles/panagetadmin/libs/bootstrap-3.3.5/less/labels.less",
		"/home/roussillep/sandbox/panaget/web/bundles/panagetadmin/libs/bootstrap-3.3.5/less/mixins/labels.less",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/Traits/ProfileController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/Repository/PointOfSaleRepository.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Admin/qr_creation_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_creation_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_delegate_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Admin/inquiry_creation_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Admin/qr_comment_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/DevController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/translations/messages.en.yml",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170223145327.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Commercial/qr_refuse_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_refuse_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_remind_24_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_remind_48_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_remind_lead_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Pro/qr_assignation_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Pro/qr_contact_8J_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Pro/qr_remind_36_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Retailer/qr_acceptation_notif.html.twig",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170309163757.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/QuoteRequest/AssignationHelper.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/QuoteRequestWithoutProjectType.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/Region.php",
		"/home/roussillep/sandbox/panaget/app/config/config.yml",
		"/home/roussillep/sandbox/panaget/vendor/doctrine/orm/lib/Doctrine/ORM/Query/AST/Functions/SubstringFunction.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/Department.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Dashboard/dashboard-commercial.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Dashboard/dashboard-retailer.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Dashboard/dashboard-section.html.twig",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170302172401.php",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170302151439.php",
		"/home/roussillep/sandbox/panaget/app/config/capistrano/deploy.rb",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/public/less/variables.less",
		"/home/roussillep/sandbox/panaget/vendor/faros/admin-bundle/Faros/AdminBundle/Controller/CRUD/ORMController.php",
		"/home/roussillep/sandbox/panaget/vendor/faros/avant-theme-bundle/Faros/AvantThemeBundle/Resources/views/themes/avant/CRUD/list.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/Handler/QuoteRequestWithoutProjectHandler.php",
		"/home/roussillep/sandbox/panaget/app/config/parameters.yml",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/RetailerUser/edit.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/translations/messages.fr.yml",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170228154621.php",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170302103317.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Dashboard/_statm2_attr_sale_admin.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/Dashboard/_statm2_attr_sale_section.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Import/AbstractImportProListener.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/CommercialProfile/show.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/PointOfSale/show.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Pro/qr_unassign_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Pro/qr_unassign_notif.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/CommercialProfile.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/CommercialProfile/list.html.twig",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/views/CommercialProfile/binomials.html.twig",
		"/home/roussillep/sandbox/panaget/app/DoctrineMigrations/Version20170228154348.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/config/routing/commercial_profile.yml",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Resources/config/roles.yml",
		"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form/CommercialBinomialsType.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Controller/ContactController.php",
		"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Behavior/StatusableHelper.php",
		"/home/roussillep/.config/sublime-text-3/Packages/User/TodoReview.sublime-settings"
	],
	"find":
	{
		"height": 48.0
	},
	"find_in_files":
	{
		"height": 130.0,
		"where_history":
		[
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle",
			"/home/roussillep/sandbox/panaget/vendor/faros/qb-bundle",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email",
			"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle",
			"/home/roussillep/sandbox/panaget/web/bundles/panagetadmin/libs/bootstrap-3.3.5/less",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr",
			"/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email",
			"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src/Panaget,-*.js,-*.less,-*.py,-*.css.*",
			"/home/roussillep/sandbox/panaget/src/Panaget,-*.js,-*.less,-*.py",
			"/home/roussillep/sandbox/panaget/src/Panaget,-*.js,-*.less",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/app/config",
			"/home/roussillep/sandbox/panaget/vendor/doctrine/dbal/lib/Doctrine",
			"/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Form",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/src/Panaget",
			"/home/roussillep/sandbox/panaget/src",
			"/home/roussillep/sandbox/panaget/app",
			"/home/roussillep/sandbox/ponroy/src",
			"/home/roussillep/sandbox/ponroy/src/Faros",
			"/home/roussillep/sandbox/ponroy/src",
			"/home/roussillep/sandbox/ponroy/src/Ponroy",
			"/home/roussillep/sandbox/ponroy/src/Ponroy/ShopBundle/Resources",
			"/home/roussillep/sandbox/ponroy/src/Ponroy",
			"/home/roussillep/sandbox/todaycar/src/SiteBundle/Resources/public/less"
		]
	},
	"find_state":
	{
		"case_sensitive": false,
		"find_history":
		[
			"commercialbinomial",
			"setCommercialB",
			"expire",
			"getQrAdminRecipient",
			"mail",
			"CsvGenerator",
			"_trend.html.twig",
			"technical",
			"getProductReferences",
			"cancelDate",
			"quote_request",
			"orderRef",
			"qraSale",
			"orderDate",
			"oderDate",
			"qra_sale",
			"local",
			"{{ date }}",
			"assignments",
			"qr_contact_15J_notif",
			"getOtherCommercial",
			"delegate",
			"commercial_quote_request_commercial",
			"%s [S]",
			"%s [T]",
			"delegate",
			"admin",
			"qr_contact_15J_notif",
			"qr_remind_15J_notif",
			"action:",
			"toString",
			"switchToInquiry",
			"Unknown QuoteRequest action",
			"defaultCommercial",
			"ContactMode",
			"contactMode",
			"ContactMode",
			"->warn",
			"Try to log an unknown action",
			"no_sale",
			"noSale",
			"nosale",
			"getDefaultCommercial",
			"$e",
			"Vous avez une demande de devis sur l'extranet Panaget en atten",
			"awake",
			"label-qr-",
			".label-variant",
			".label-qr",
			"label-qr",
			".label-qr",
			"label-variant",
			"label-",
			"label-qr-",
			"lead-qr-",
			"url_input",
			"delete_confirm",
			"\n            <a href=\"#\"><i class=\"fa fa-cogs\"></i></a>",
			"</h4>",
			"<div class=\"count\"></div>",
			"</h4>",
			"trigger",
			"total_comment",
			".posted-comments-postbox",
			"binomial",
			"collapseThree",
			"collapseTwo",
			"|",
			"id: \\d+",
			"|",
			"collapseOne",
			"comment",
			"assignment.pointOfSale.retailerUsers.first.user",
			"allow_impersonate",
			"entity.status == 'assigned' and",
			"currentAssignment",
			" and entity.status == 'assigned'",
			"qra_sale",
			"\nquote_request_assignment:",
			"progress",
			"new:",
			"in_progress",
			"status",
			"action",
			"awake",
			", 'date' => $assignDate",
			", 'qra' => $qras, 'date' => $assignDate",
			",{% endfor %}",
			"|count",
			"|count()",
			"Le(s) professionnel(s)",
			"_3_",
			"q3_",
			"q2_",
			"q1_",
			"p0_",
			"contactedAt",
			"contacted_at",
			", updated_by",
			"setExpriredDate",
			"expriredDate",
			"exprireDate",
			"expiredAt",
			"expiredDate",
			"Date",
			"expired",
			"label label-qr-",
			"%s",
			"()]);\n",
			"$commercial",
			"Commercial",
			"commercial",
			"Commercial",
			"commercial",
			"assign",
			"nurturing",
			"removeAssignmentsForQr",
			"in_progress",
			"qra_lost",
			"Unsupported QuoteRequest actio",
			"standBy",
			"etn",
			"ContactedAt",
			"contactedAt",
			"ContactedAt",
			"standByDate",
			"todo",
			"todo-rml"
		],
		"highlight": true,
		"in_selection": false,
		"preserve_case": false,
		"regex": false,
		"replace_history":
		[
			"|length",
			"|count",
			"label label-default label-qr-",
			"getAssignmentsByQr",
			"edentary",
			"sedentary",
			"inomial",
			"binomal",
			"get('ponroy_mailer')"
		],
		"reverse": false,
		"show_context": true,
		"use_buffer2": true,
		"whole_word": false,
		"wrap": true
	},
	"groups":
	[
		{
			"selected": 2,
			"sheets":
			[
				{
					"buffer": 0,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/HourlyEmailReminderCommand.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 9116,
						"regions":
						{
						},
						"selection":
						[
							[
								4610,
								4610
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										4636,
										4637
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										2356,
										2357
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/Boxy Theme/schemes/Boxy Solarized Light.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"hex_compressed",
									"hsla",
									"webcolors",
									"hex",
									"rgba",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".php",
								"current_syntax": "PHP/PHP",
								"enabled": true,
								"last_updated": 1499845162.4,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 1290.0,
						"zoom_level": 1.0
					},
					"stack_index": 3,
					"type": "text"
				},
				{
					"buffer": 1,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Mailer/Mailer.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 5904,
						"regions":
						{
						},
						"selection":
						[
							[
								1058,
								1058
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										1805,
										1806
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										992,
										993
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/Boxy Theme/schemes/Boxy Solarized Light.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"hex_compressed",
									"hsla",
									"webcolors",
									"hex",
									"rgba",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".php",
								"current_syntax": "PHP/PHP",
								"enabled": true,
								"last_updated": 1499935152.31,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 225.0,
						"zoom_level": 1.0
					},
					"stack_index": 1,
					"type": "text"
				},
				{
					"buffer": 2,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 32544,
						"regions":
						{
						},
						"selection":
						[
							[
								28125,
								28125
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										28800,
										28801
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										27983,
										27984
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/Boxy Theme/schemes/Boxy Solarized Light.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"hex_compressed",
									"hsla",
									"webcolors",
									"hex",
									"rgba",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".php",
								"current_syntax": "PHP/PHP",
								"enabled": true,
								"last_updated": 1499935152.31,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 10005.0,
						"zoom_level": 1.0
					},
					"stack_index": 0,
					"type": "text"
				},
				{
					"buffer": 3,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/Repository/QuoteRequestRepository.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 14800,
						"regions":
						{
						},
						"selection":
						[
							[
								2982,
								2982
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										2981,
										2982
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/curly_bracket.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										663,
										664
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/Boxy Theme/schemes/Boxy Solarized Light.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"hex_compressed",
									"hsla",
									"webcolors",
									"hex",
									"rgba",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".php",
								"current_syntax": "PHP/PHP",
								"enabled": true,
								"last_updated": 1499845162.4,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 180.0,
						"zoom_level": 1.0
					},
					"stack_index": 4,
					"type": "text"
				},
				{
					"buffer": 4,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/GenerateQuoteRequestStarsCommand.php",
					"semi_transient": true,
					"settings":
					{
						"buffer_size": 1376,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/Boxy Theme/schemes/Boxy Solarized Light.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"hex_compressed",
									"hsla",
									"webcolors",
									"hex",
									"rgba",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".php",
								"current_syntax": "PHP/PHP",
								"enabled": true,
								"last_updated": 1499845162.4,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 2,
					"type": "text"
				},
				{
					"buffer": 5,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 88971,
						"regions":
						{
						},
						"selection":
						[
							[
								39846,
								39846
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
									"1":
									[
										39772,
										39773
									]
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content"
							],
							"default_dir": "/home/roussillep/sandbox/panaget",
							"git_root_dir": "/home/roussillep/sandbox/panaget",
							"syntax": "Packages/Git/syntax/Git Blame.tmLanguage",
							"word_wrap": false
						},
						"translation.x": 0.0,
						"translation.y": 6024.0,
						"zoom_level": 1.0
					},
					"stack_index": 12,
					"type": "text"
				},
				{
					"buffer": 6,
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 23959,
						"regions":
						{
							"match":
							{
								"flags": 112,
								"regions":
								[
									[
										268,
										286
									],
									[
										568,
										586
									],
									[
										817,
										835
									],
									[
										1245,
										1263
									],
									[
										1281,
										1299
									],
									[
										1640,
										1658
									],
									[
										1676,
										1694
									],
									[
										2061,
										2079
									],
									[
										2339,
										2357
									],
									[
										2436,
										2454
									],
									[
										2699,
										2717
									],
									[
										3081,
										3099
									],
									[
										3389,
										3407
									],
									[
										3658,
										3676
									],
									[
										4004,
										4022
									],
									[
										4233,
										4251
									],
									[
										4657,
										4675
									],
									[
										4886,
										4904
									],
									[
										5254,
										5272
									],
									[
										5662,
										5680
									],
									[
										6004,
										6022
									],
									[
										6390,
										6408
									],
									[
										6886,
										6904
									],
									[
										7044,
										7062
									],
									[
										7379,
										7397
									],
									[
										7605,
										7623
									],
									[
										7996,
										8014
									],
									[
										8397,
										8415
									],
									[
										8555,
										8573
									],
									[
										8911,
										8929
									],
									[
										9295,
										9313
									],
									[
										9729,
										9747
									],
									[
										9887,
										9905
									],
									[
										10250,
										10268
									],
									[
										10639,
										10657
									],
									[
										11076,
										11094
									],
									[
										11247,
										11265
									],
									[
										11509,
										11527
									],
									[
										11802,
										11820
									],
									[
										12131,
										12149
									],
									[
										12186,
										12204
									],
									[
										12526,
										12544
									],
									[
										12581,
										12599
									],
									[
										12790,
										12808
									],
									[
										12997,
										13015
									],
									[
										13292,
										13310
									],
									[
										13574,
										13592
									],
									[
										13901,
										13919
									],
									[
										14108,
										14126
									],
									[
										14324,
										14342
									],
									[
										14498,
										14516
									],
									[
										14730,
										14748
									],
									[
										14867,
										14885
									],
									[
										15106,
										15124
									],
									[
										15276,
										15294
									],
									[
										15500,
										15518
									],
									[
										15633,
										15651
									],
									[
										15901,
										15919
									],
									[
										16002,
										16020
									],
									[
										16360,
										16378
									],
									[
										16597,
										16615
									],
									[
										16734,
										16752
									],
									[
										16829,
										16847
									],
									[
										16848,
										16866
									],
									[
										16868,
										16886
									],
									[
										16930,
										16948
									],
									[
										16952,
										16970
									],
									[
										17060,
										17078
									],
									[
										17123,
										17141
									],
									[
										17262,
										17280
									],
									[
										17387,
										17405
									],
									[
										17467,
										17485
									],
									[
										17648,
										17666
									],
									[
										17775,
										17793
									],
									[
										17855,
										17873
									],
									[
										18178,
										18196
									],
									[
										18492,
										18510
									],
									[
										19051,
										19069
									],
									[
										19236,
										19254
									],
									[
										19614,
										19632
									],
									[
										19916,
										19934
									],
									[
										20008,
										20026
									],
									[
										20059,
										20077
									],
									[
										20476,
										20494
									],
									[
										20776,
										20794
									],
									[
										21066,
										21084
									],
									[
										21091,
										21109
									],
									[
										21227,
										21245
									],
									[
										21380,
										21398
									],
									[
										21400,
										21418
									],
									[
										21602,
										21620
									],
									[
										21622,
										21640
									],
									[
										21710,
										21728
									],
									[
										21730,
										21748
									],
									[
										21819,
										21837
									],
									[
										21839,
										21857
									],
									[
										22071,
										22089
									],
									[
										22415,
										22433
									],
									[
										22688,
										22706
									],
									[
										23034,
										23052
									],
									[
										23305,
										23323
									],
									[
										23579,
										23597
									],
									[
										23810,
										23828
									]
								],
								"scope": ""
							}
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"default_dir": "/home/roussillep/sandbox/panaget",
							"detect_indentation": false,
							"line_numbers": false,
							"output_tag": 1,
							"result_base_dir": "",
							"result_file_regex": "^([^ \t].*):$",
							"result_line_regex": "^ +([0-9]+):",
							"scroll_past_end": true,
							"syntax": "Packages/Default/Find Results.hidden-tmLanguage",
							"translate_tabs_to_spaces": false
						},
						"translation.x": 0.0,
						"translation.y": 1980.0,
						"zoom_level": 1.0
					},
					"stack_index": 11,
					"type": "text"
				},
				{
					"buffer": 7,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 3851,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 10,
					"type": "text"
				},
				{
					"buffer": 8,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 25212,
						"regions":
						{
						},
						"selection":
						[
							[
								782,
								782
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/Boxy Theme/schemes/Boxy Solarized Light.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.preview_meta":
							{
							},
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"hex_compressed",
									"hsla",
									"webcolors",
									"hex",
									"rgba",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".php",
								"current_syntax": "PHP/PHP",
								"enabled": true,
								"last_updated": 1499845162.4,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 5,
					"type": "text"
				},
				{
					"buffer": 9,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_creation_notif.html.twig",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 998,
						"regions":
						{
						},
						"selection":
						[
							[
								772,
								772
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										875,
										876
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/tag.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										648,
										649
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP-Twig/Syntaxes/HTML (Twig).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 9,
					"type": "text"
				},
				{
					"buffer": 10,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Commercial/qr_creation_notif.html.twig",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 845,
						"regions":
						{
						},
						"selection":
						[
							[
								706,
								706
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										705,
										706
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/double_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										590,
										591
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP-Twig/Syntaxes/HTML (Twig).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 8,
					"type": "text"
				},
				{
					"buffer": 11,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/SiteBundle/Resources/views/Email/en/Commercial/qr_delegate_notif.html.twig",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 712,
						"regions":
						{
						},
						"selection":
						[
							[
								363,
								363
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
									"1":
									[
										388,
										389
									]
								},
								"icon":
								{
									"1":
									[
										"Packages/BracketHighlighter/icons/single_quote.png",
										"brackethighlighter.default"
									]
								},
								"open":
								{
									"1":
									[
										339,
										340
									]
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content"
							],
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP-Twig/Syntaxes/HTML (Twig).tmLanguage",
							"tab_size": 2,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 7,
					"type": "text"
				},
				{
					"buffer": 12,
					"file": "/home/roussillep/sandbox/panaget/src/Panaget/AdminBundle/Command/Cron/DailyEmailReminderCommand.php",
					"semi_transient": false,
					"settings":
					{
						"buffer_size": 10985,
						"regions":
						{
						},
						"selection":
						[
							[
								0,
								0
							]
						],
						"settings":
						{
							"bracket_highlighter.busy": false,
							"bracket_highlighter.locations":
							{
								"close":
								{
								},
								"icon":
								{
								},
								"open":
								{
								},
								"unmatched":
								{
								}
							},
							"bracket_highlighter.regions":
							[
								"bh_unmatched",
								"bh_unmatched_center",
								"bh_unmatched_open",
								"bh_unmatched_close",
								"bh_unmatched_content",
								"bh_angle",
								"bh_angle_center",
								"bh_angle_open",
								"bh_angle_close",
								"bh_angle_content",
								"bh_default",
								"bh_default_center",
								"bh_default_open",
								"bh_default_close",
								"bh_default_content",
								"bh_round",
								"bh_round_center",
								"bh_round_open",
								"bh_round_close",
								"bh_round_content",
								"bh_tag",
								"bh_tag_center",
								"bh_tag_open",
								"bh_tag_close",
								"bh_tag_content",
								"bh_double_quote",
								"bh_double_quote_center",
								"bh_double_quote_open",
								"bh_double_quote_close",
								"bh_double_quote_content",
								"bh_square",
								"bh_square_center",
								"bh_square_open",
								"bh_square_close",
								"bh_square_content",
								"bh_curly",
								"bh_curly_center",
								"bh_curly_open",
								"bh_curly_close",
								"bh_curly_content",
								"bh_single_quote",
								"bh_single_quote_center",
								"bh_single_quote_open",
								"bh_single_quote_close",
								"bh_single_quote_content",
								"bh_regex",
								"bh_regex_center",
								"bh_regex_open",
								"bh_regex_close",
								"bh_regex_content",
								"bh_c_define",
								"bh_c_define_center",
								"bh_c_define_open",
								"bh_c_define_close",
								"bh_c_define_content"
							],
							"color_helper.box_height": 15,
							"color_helper.color_scheme": "Packages/Boxy Theme/schemes/Boxy Solarized Light.tmTheme",
							"color_helper.file_palette":
							[
							],
							"color_helper.scan":
							{
								"allowed_colors":
								[
									"hsl",
									"hex_compressed",
									"hsla",
									"webcolors",
									"hex",
									"rgba",
									"rgb"
								],
								"compress_hex_output": true,
								"current_ext": ".php",
								"current_syntax": "PHP/PHP",
								"enabled": true,
								"last_updated": 1499845162.4,
								"scan_completion_scopes":
								[
								],
								"scan_scopes":
								[
									"meta.declaration-list.css -support.type.property-name.css -comment -string",
									"meta.property-value.css -comment -string",
									"meta.value.css -comment -string",
									"meta.tag.inline.any.html string.quoted -constant.character.entity.html",
									"meta.tag.any.html meta.attribute-with-value.style.html"
								],
								"use_hex_argb": false
							},
							"editorconfig": true,
							"ensure_newline_at_eof_on_save": true,
							"syntax": "Packages/PHP/PHP.sublime-syntax",
							"tab_size": 4,
							"translate_tabs_to_spaces": true,
							"trim_trailing_white_space_on_save": true
						},
						"translation.x": 0.0,
						"translation.y": 0.0,
						"zoom_level": 1.0
					},
					"stack_index": 6,
					"type": "text"
				}
			]
		}
	],
	"incremental_find":
	{
		"height": 23.0
	},
	"input":
	{
		"height": 31.0
	},
	"layout":
	{
		"cells":
		[
			[
				0,
				0,
				1,
				1
			]
		],
		"cols":
		[
			0.0,
			1.0
		],
		"rows":
		[
			0.0,
			1.0
		]
	},
	"menu_visible": true,
	"output.find_results":
	{
		"height": 0.0
	},
	"pinned_build_system": "",
	"project": "panaget.sublime-project",
	"replace":
	{
		"height": 90.0
	},
	"save_all_on_build": true,
	"select_file":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
			[
				"quotecontroler",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quomanager",
				"src/Panaget/SiteBundle/QuoteRequest/Manager.php"
			],
			[
				"quoterequest",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"commercialbino",
				"src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php"
			],
			[
				"dashcontr",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"dailyremin",
				"src/Panaget/AdminBundle/Command/Cron/DailyEmailReminderCommand.php"
			],
			[
				"crontabpro",
				"app/Resources/crontab.production"
			],
			[
				"quoterequ",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"csvgenerator",
				"src/Panaget/AdminBundle/Export/CsvGenerator.php"
			],
			[
				"crontab",
				"app/Resources/crontab.production"
			],
			[
				"_trend",
				"src/Panaget/SiteBundle/Resources/views/Trend/_trend.html.twig"
			],
			[
				"logger.php",
				"src/Panaget/SiteBundle/QuoteRequest/Logger.php"
			],
			[
				"quotemanage",
				"src/Panaget/SiteBundle/QuoteRequest/Manager.php"
			],
			[
				"logger",
				"src/Panaget/SiteBundle/QuoteRequest/Logger.php"
			],
			[
				"quotemanager",
				"src/Panaget/SiteBundle/QuoteRequest/Manager.php"
			],
			[
				"quotereqtadmincontr",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"15jnotif",
				"src/Panaget/SiteBundle/Resources/views/Email/fr/Commercial/qr_contact_15J_notif.html.twig"
			],
			[
				"formfieldshtml",
				"vendor/faros/avant-theme-bundle/Faros/AvantThemeBundle/Resources/views/themes/avant/Form/fields.html.twig"
			],
			[
				"quoterequestass",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"pointofsl",
				"src/Panaget/SiteBundle/Entity/Core/PointOfSale.php"
			],
			[
				"cront",
				"app/Resources/crontab.production"
			],
			[
				"quoterequesass",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"crontabprod",
				"app/Resources/crontab.production"
			],
			[
				"manager.hp",
				"src/Panaget/SiteBundle/QuoteRequest/Manager.php"
			],
			[
				"mailer",
				"src/Panaget/SiteBundle/Mailer/Mailer.php"
			],
			[
				"qr_remind_15j_notif",
				"src/Panaget/SiteBundle/Resources/views/Email/fr/Pro/qr_remind_15J_notif.html.twig"
			],
			[
				"quoteadmicont",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoteadmincontr",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"commercialbinomi",
				"src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php"
			],
			[
				"quotereqshow",
				"src/Panaget/AdminBundle/Resources/views/Lead/QuoteRequestAdmin/show.html.twig"
			],
			[
				"quotereq",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"manager",
				"src/Panaget/SiteBundle/QuoteRequest/Manager.php"
			],
			[
				"allrefuse",
				"src/Panaget/SiteBundle/Resources/views/Email/en/Commercial/qr_all_refuse_notif.html.twig"
			],
			[
				"checref",
				"vendor/symfony/symfony/src/Symfony/Component/DependencyInjection/Compiler/CheckReferenceValidityPass.php"
			],
			[
				"quoteconot",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"pointofsale",
				"src/Panaget/SiteBundle/Entity/Core/PointOfSale.php"
			],
			[
				"qr_remind_21j_notif",
				"src/Panaget/SiteBundle/Resources/views/Email/fr/User/qr_remind_21J_notif.html.twig"
			],
			[
				"quoteshow",
				"src/Panaget/AdminBundle/Resources/views/Lead/QuoteRequestAdmin/show.html.twig"
			],
			[
				"labels.less",
				"web/bundles/panagetadmin/libs/bootstrap-3.3.5/less/labels.less"
			],
			[
				"mixins.less",
				"web/bundles/panagetadmin/libs/bootstrap-3.3.5/less/mixins.less"
			],
			[
				"buttons.less",
				"node_modules/gulp-less/test/fixtures/buttons.less"
			],
			[
				"quotecontroller",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"querycontroller",
				"vendor/faros/qb-bundle/Faros/QBBundle/Controller/QueryController.php"
			],
			[
				"commentcontroller",
				"src/LePhare/CommentBundle/Controller/CommentController.php"
			],
			[
				"jquerycomment",
				"web/bundles/lepharecomment/libs/jquery-comment/js/jquery.comment.js"
			],
			[
				"comment.js",
				"web/bundles/lepharecomment/js/comment.js"
			],
			[
				"retailerpf",
				"src/Panaget/SiteBundle/Entity/Core/RetailerProfile.php"
			],
			[
				"commentrouting",
				"src/LePhare/CommentBundle/Resources/config/routing.yml"
			],
			[
				"commentcontroler",
				"src/LePhare/CommentBundle/Controller/CommentController.php"
			],
			[
				"poofsal",
				"src/Panaget/SiteBundle/Entity/Core/PointOfSale.php"
			],
			[
				"commerciaco",
				"src/Panaget/AdminBundle/Controller/CommercialProfileController.php"
			],
			[
				"devcontroller",
				"src/Panaget/AdminBundle/Controller/DevController.php"
			],
			[
				"dashbocontr",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"quotecontr",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoteadcont",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quotere",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"combinphp",
				"src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php"
			],
			[
				"qutelog",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestLog.php"
			],
			[
				"quotelog",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestLog.php"
			],
			[
				"quotereadmicontr",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoteass",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"quotereas",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"quotereu",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"quoteassign",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"dashbcontr",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"region",
				"src/Panaget/SiteBundle/Entity/Core/Region.php"
			],
			[
				"substrphp",
				"vendor/doctrine/orm/lib/Doctrine/ORM/Query/AST/Functions/SubstringFunction.php"
			],
			[
				"departme",
				"src/Panaget/SiteBundle/Entity/Core/Department.php"
			],
			[
				"dashbo",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"quotereqacon",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"qr.php",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"quotereque",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"qrmanager",
				"src/Panaget/SiteBundle/QuoteRequest/Manager.php"
			],
			[
				"crudlisthtmltw",
				"vendor/faros/avant-theme-bundle/Faros/AvantThemeBundle/Resources/views/themes/avant/CRUD/list.html.twig"
			],
			[
				"ormcontr",
				"vendor/faros/admin-bundle/Faros/AdminBundle/Controller/CRUD/ORMController.php"
			],
			[
				"adbcontroller",
				"src/Panaget/AdminBundle/Controller/DevController.php"
			],
			[
				"quotereqass",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"quoterequestlog",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestLog.php"
			],
			[
				"quoteontroller",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"qucont",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoteadminontr",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"qurmanager",
				"src/Panaget/SiteBundle/QuoteRequest/Manager.php"
			],
			[
				"quoterecontr",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quotereqadmi",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoterqass",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"quoreass",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"retaileruseredit",
				"src/Panaget/AdminBundle/Resources/views/RetailerUser/edit.html.twig"
			],
			[
				"quoterequestwithoutprojecttype",
				"src/Panaget/AdminBundle/Form/QuoteRequestWithoutProjectType.php"
			],
			[
				"admintype",
				"src/Panaget/AdminBundle/Form/QuoteRequestAdminType.php"
			],
			[
				"adminhandler",
				"src/Panaget/AdminBundle/Form/Handler/QuoteRequestAdminHandler.php"
			],
			[
				"quoterequestshow",
				"src/Panaget/AdminBundle/Resources/views/Lead/QuoteRequestAdmin/show.html.twig"
			],
			[
				"quoterequadmin",
				"src/Panaget/AdminBundle/Form/QuoteRequestAdminType.php"
			],
			[
				"quoterequestcontroller",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"commercialbin",
				"src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php"
			],
			[
				"",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quotereqcontroller",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"dashbcontroller",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"commercialbinomia",
				"src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php"
			],
			[
				"quoterequlog",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestLog.php"
			],
			[
				"commercicontro",
				"src/Panaget/AdminBundle/Controller/CommercialProfileController.php"
			],
			[
				"binom",
				"src/Panaget/SiteBundle/Entity/Core/CommercialBinomial.php"
			],
			[
				"dashbocontroller",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"cowotype",
				"src/Panaget/AdminBundle/Form/CoworkersType.php"
			],
			[
				"commrcialprofi",
				"src/Panaget/SiteBundle/Entity/Core/CommercialProfile.php"
			],
			[
				"quotereqassi",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequestAssignment.php"
			],
			[
				"quoteadm",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoteadmoc",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoteadmon",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoteadmin",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"poitnofsale",
				"src/Panaget/SiteBundle/Entity/Core/PointOfSale.php"
			],
			[
				"poiofsalerepo",
				"src/Panaget/SiteBundle/Entity/Core/Repository/PointOfSaleRepository.php"
			],
			[
				"quotereqrep",
				"src/Panaget/SiteBundle/Entity/Lead/Repository/QuoteRequestRepository.php"
			],
			[
				"statablehelp",
				"src/Panaget/SiteBundle/Behavior/StatusableHelper.php"
			],
			[
				"quoterequestadmincontroller",
				"src/Panaget/AdminBundle/Controller/Lead/QuoteRequestAdminController.php"
			],
			[
				"quoterequest.php",
				"src/Panaget/SiteBundle/Entity/Lead/QuoteRequest.php"
			],
			[
				"commerciprofile",
				"src/Panaget/SiteBundle/Entity/Core/CommercialProfile.php"
			],
			[
				"dbalquer",
				"vendor/doctrine/dbal/lib/Doctrine/DBAL/Query/QueryBuilder.php"
			],
			[
				"abscontroler",
				"vendor/faros/admin-bundle/Faros/AdminBundle/Controller/CRUD/AbstractController.php"
			],
			[
				"ormcontroller",
				"vendor/faros/admin-bundle/Faros/AdminBundle/Controller/CRUD/ORMController.php"
			],
			[
				"crudedit",
				"vendor/faros/avant-theme-bundle/Faros/AvantThemeBundle/Resources/views/themes/avant/CRUD/edit.html.twig"
			],
			[
				"commercialprofile",
				"src/Panaget/SiteBundle/Entity/Core/CommercialProfile.php"
			],
			[
				"dascontrol",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"dashboard",
				"src/Panaget/AdminBundle/Controller/DashboardController.php"
			],
			[
				"geo",
				"src/Panaget/SiteBundle/Geo/GeolocHelper.php"
			],
			[
				"importprolis",
				"src/Panaget/AdminBundle/Import/AbstractImportProListener.php"
			],
			[
				"cartshow",
				"src/Ponroy/ShopBundle/Resources/views/Cart/show.html.twig"
			],
			[
				"cartcontroller",
				"src/Ponroy/ShopBundle/Controller/Cart/CartController.php"
			],
			[
				"constrvalida",
				"src/Faros/ShopBundle/Constraint/ConstraintValidator.php"
			]
		],
		"width": 0.0
	},
	"select_project":
	{
		"height": 500.0,
		"last_filter": "ponroy",
		"selected_items":
		[
			[
				"ponroy",
				"~/sandbox/ponroy.sublime-workspace"
			],
			[
				"",
				"~/sandbox/dotfiles.sublime-workspace"
			]
		],
		"width": 380.0
	},
	"select_symbol":
	{
		"height": 0.0,
		"last_filter": "",
		"selected_items":
		[
		],
		"width": 0.0
	},
	"selected_group": 0,
	"settings":
	{
	},
	"show_minimap": false,
	"show_open_files": false,
	"show_tabs": true,
	"side_bar_visible": true,
	"side_bar_width": 341.0,
	"status_bar_visible": true,
	"template_settings":
	{
	}
}
